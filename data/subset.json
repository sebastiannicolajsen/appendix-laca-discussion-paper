[
  {
    "title": "Teaching Software Psychology: expanding the perspective",
    "abstract": "This paper describes the curriculum development and teaching experience of a junior core course entitled Software Psychology, offered in the undergraduate Software Engineering program at the author's affiliated university. In particular, the pedagogy of problem-based learning is introduced, together with the evolution of the course content. It will also address issues such as resources and facilities needed for the course, and the students' perceived learning as well as the author's lessons learned therein.",
    "coded": [
      "curriculum",
      "teaching/learning theories & models"
    ]
  },
  {
    "title": "Computer science preparation for secondary school teachers",
    "abstract": "Computers have now become an extremely important factor in society. It is thus important that education about computers, their use, and the role they are playing in the development and functioning of society be undertaken as soon as feasible in the educational process. A logical place for this undertaking is in the secondary school or perhaps even at the junior high school level. Computers can serve the secondary teacher as an instructional tool for problem formulation and problem solution as well as for learning scientific ideas. Computers can help provide motivation for much of the work in mathematics, as well as in science and business. They can also provide the necessary tool to promote and carry out the applied and practical side of subjects, which is receiving far more realistic attention today. They thus can help the teacher combat the all too prevalent notion that mathematics and sometimes science are too theoretical. Since a well trained teacher with appropriate computer science education is the key to this educational problem, primary attention will be given to the teacher training problem. Another reason for this emphasis is that not enough is being done in our colleges currently. It is hoped that this presentation will call attention to this need and help motivate educators to further action to solve the problem in the teacher training area, which in turn will take care of the problem in the secondary school itself."
  },
  {
    "title": "Motivating Students Beyond Course Requirements with a Serious Game",
    "abstract": "Educators are challenged to provide computer science students enough skills-based practice within the confines of a course. Yet it is also difficult to motivate students to spend additional time for further practice outside of course requirements. We are investigating games and gamification as methods for motivating students to engage in additional practice. In this paper, we report on the study of a fantasy-themed serious game to teach Ruby programming skills. We examine how well it motivated students to complete additional levels of the game than was assigned for course credit in an undergraduate Software Engineering course. Of the 185 student participants, 42.78% completed one or more optional game levels. These students spent more than twice as much time playing than their counterparts who only completed the mandatory game levels."
  },
  {
    "title": "ThreadMentor: a system for teaching multithreaded programming",
    "abstract": "Teaching threaded programming is not an easy task. It is even more challenging when students encounter synchronization primitives. To address this problem, we developed ThreadMentor for teaching threaded programming. In this demonstration, we shall present the capability of ThreadMentor, especially its visualization system, and share our experience with other educators. ThreadMentor consists of a class library and a visualization system. The class library encapsulates all complex system level functions into a number of easy to use classes and supports commonly seen thread management functions (e.g., thread creation, termination, join, suspension and resume) and synchronization primitives (e.g., mutex locks, semaphores, Hoare and Mesa monitors, barriers, reader-writer locks, and synchronous and asynchronous channels). The visualization system displays all events on-the-fly and is activated automatically when a user program is run. A user can bring up windows to display the status of each thread and the parent-child hierarchy. The History Window is particularly useful for a beginner to see the execution behavior of a threaded program. It shows all events that have occurred, which include thread join, suspension, resume, mutex lock/unlock, semaphore wait/signal, entering/exiting a monitor, condition variable wait/signal, channel send/receive, and so on. A user may also activate the display of various ”links” that connect related events. To help students further, a user may bring up a window for each synchronization primitive to display all of its vital information. A user may also click on an event tag in the History Window to bring up a source window to display the source code with the line that causes the event to occur highlighted. ThreadMentor is a portable system that runs on Windows, Linux, and Sun Solaris, and is free to the public. It is being used at Michigan Technological University and site tested at various institutions. The interested readers may find additional information at the following sites:"
  },
  {
    "title": "The use of the WWW to support distance learning through NTU",
    "abstract": "The teaching of graduate level computer science courses can be a challenging task. The students are confronted with a wealth of complex material with, often, higher expectations by their instructors on their performance. Distance education of students employed full-time presents an interesting and complex challenge. This paper describes the instructional package consisting primarily of a World Wide Web (WWW) site used by the author to aid in educating distance education students enrolled in graduate Artificial Intelligence Concept courses at the University of Florida."
  },
  {
    "title": "Learning styles: novices decide",
    "abstract": "We present what students say about their preferred learning style to succeed in introductory programming. Using the Felder-Silverman learning styles, students contrasted the 'best' learning style for programming with the 'best' for learning mathematics. Overall students believe that while they learn mathematics using a reflective style, learning to program is significantly more active. They also believe learning mathematics has a strong verbal component, whereas learning programming is primarily visual."
  },
  {
    "title": "Peer Grading Without Protest: The SPARK Approach to Summative Peer Assessment",
    "abstract": "As Computer Science Professors, we strive to construct courses that maximally support and contribute to student learning through carefully crafted in-class and out-of-class activities. There is evidence that homework enhances student learning, and that students are more likely to do their homework when it affects their grade. Thus, faculty often find themselves seeking the right balance between the increase in student understanding that additional graded homework might offer and the burden of grading that homework if automated grading software is not available. Peer grading may seem like the obvious solution, since it results in only a limited increase in student workload while still incentivizing homework completion. Unfortunately, students tend to distrust their peers' abilities to evaluate their work, and consequently previous approaches to summative peer assessment risk increasing both student frustration and faculty grading load. This experience report describes SPARK, our unique approach to summative peer assessment that we have successfully used over several semesters for weekly problem sets in a theoretical computer science course as well as on a more limited basis in both undergraduate and graduate robotics courses. Surveys indicate that a majority of students find it easy to use the SPARK approach to grade their peers, believe that the homework assignments helped their learning, acknowledge that they would not have put the same time and effort into their homework had it not been graded, and believe that SPARK's method of computing their final grade for an assignment is fair."
  },
  {
    "title": "Are We There Yet? Novices' Code Smells linked to Loop Constructs",
    "abstract": "Research on novice programmers has focused heavily on identifying errors and misconceptions and helping novices to correct them. In contrast, there is a sparse but growing effort into helping students to evaluate and improve the quality of their code once it is functionally correct. One way to improve quality is to simplify code structure by getting rid of poorly written code patterns, or so called code smells. Although code smells for software developers are well catalogued, novices exhibit a different range of code smells compared to experts. A catalogue of novices' code smells and their transformations will help instructors to discuss code quality issues with their students. Smells related to conditional expressions and conditional statements have been reported both in novice and expert studies. Our poster focuses on lesser-known novice code smells related to iteration from the literature and it also introduces a new iterative pattern, named \"AskFirstOrLast\", and how to refactor it."
  },
  {
    "title": "Electronic peer review and peer grading in computer-science courses",
    "abstract": "We have implemented a peer-grading system for review of student assignments over the World-Wide Web and used it in approximately eight computer-science courses. Students prepare their assignments and submit them to our Peer Grader (PG) system. Other students are then assigned to review and grade the assignments. The system allows authors and reviewers to communicate with authors being able to update their submissions. Unique features of our approach include the ability to submit arbitrary sets of Web pages for review, and mechanisms for encouraging careful review of submissions. We have used the system to produce high-quality compilations of student work. Our assignment cycle consists of six phases, from signing up for an assignment to Web publishing of the final result. Based upon our experience with PG, we offer suggestions for improving the system to make it more easily usable by students at all levels."
  },
  {
    "title": "A Study of the Effects of Oral Proficiency Exams in Introductory Programming Courses on Underrepresented Groups",
    "abstract": "Oral proficiency exams implemented in introductory programming courses at a public, research, minority-serving university provide a way to connect with students one-on-one, keep students accountable on the course material to improve their learning, and help improve feelings of belongingness in the learning environment. This study analyzes data disaggregated based on majority and underrepresented demographic groups by gender, race/ethnicity, and parental education level, to investigate the following three research themes across all groups: (1) to determine the impact of the oral exams on student motivation for independent learning; (2) to compare student stress levels related to the oral exams; and (3) to compare belongingness and final course performance. Student survey data was collected and analyzed following the oral exam intervention. For research theme (1), students across nearly all demographic groups reported that oral exams improved their understanding of the material and encouraged them to do more independent work. For research theme (2), students in some underrepresented groups reported higher stress levels than their majority group peers, and all groups reported a reduction in stress level after completing the oral exam. For research theme (3), students in some underrepresented groups reported lower sense of belonging and had lower final course performance than their majority group peers."
  },
  {
    "title": "Sharing and Using Programming Log Data (Abstract Only)",
    "abstract": "As more programming environments add logging features and programming data becomes more accessible, it is important to have a conversation about how we share and use this data. Uses of programming log data range from big-picture analyses to dashboards for instant teacher feedback, to intelligent, data-driven learning environments. The goal of this BOF is to talk about what data is important to collect, where it can be gathered and shared, what general data formats make sense, how to handle privacy and anonymization, and what ultimately we want to see the data used for. The BOF welcomes both producers of programming log data and current or potential consumers, interested in how it could be applied in their classrooms or research. One hopeful outcome of this BOF is a commitment to documenting and sharing existing programming data in an accessible location and format."
  },
  {
    "title": "Can Sending First and Second Year Computing Students to Technical Conferences Help Retention?",
    "abstract": "This research examines the relationship between undergraduate computing students' participation in technical conferences and psychological predictors of academic persistence. Studies have shown experiential educational activities, like conferences, encourage students' persistence in STEM; this is especially important for students underrepresented in the field, who are more likely than their well-represented peers to leave their degree programs. In recent years, academic literature has pointed to anecdotal evidence that conference participation for students early in their undergraduate education relates to students' persistence in STEM pathways. Using national survey data, we examine the relationship between conference participation and first and second year undergraduate students' persistence in computer science pathways. This paper presents results from a cross-sectional analysis and a two time-point analysis of national survey data collected from undergraduate students. Overall, we found that first and second year computing majors who attended a technical computing conference reported higher levels of belonging to their field and confidence to persist in their degree program than those who did not attend. We also found that conference participants' levels of belonging and self-confidence is higher than non-participants over time, even after controlling for initial levels at Time 1. Our analyses also showed that conference participation was associated with closing the gap in levels of belonging and self-confidence between students who are underrepresented in computing and those who are well-represented. Empirical results from this paper support anecdotal evidence that conference participation for students early in their undergraduate education may help retain students, and particularly underrepresented students, in computing majors in the long-term."
  },
  {
    "title": "A first problem for the algorithms course",
    "abstract": "I present a problem to be used in the first class of the algorithms course as an introduction to the topic. Two algorithms are given, simple but rich enough to illustrate several issues."
  },
  {
    "title": "Intellectual property law basics for computer science instructors (abstract only)",
    "abstract": "Increasingly the practice of computing involves legal issues. Patenting algorithms, domain name poaching, downloading music, and \"re-using\" HTML and graphics from web sites all raise questions of intellectual property (IP) law (which includes patents, copyrights, trade secrets, and trademarks). In the classroom, computer science educators often confront questions that have legal ramifications. The presenter, who is both a computer scientist and a lawyer, will introduce the basics of intellectual property law to give instructors a framework for recognizing the issues, answering students' questions, debunking the most egregious misconceptions about IP, and understanding generally how the law and computing interact. All CS educators are welcome; no computer is required."
  },
  {
    "title": "Improving the persistence of first-year undergraduate women in computer science",
    "abstract": "This paper describes a study of undergraduate women's retention in the first-year of the computer science major at the University of Pennsylvania for the purpose of identifying the underlying issues responsible for attrition. The subsequent steps taken by the faculty to improve women's retention is also discussed."
  },
  {
    "title": "A prototype for a data communications laboratory",
    "abstract": "This paper describes the development of a small laboratory to serve as a prototype for a Data Communications Laboratory. We discuss the planning, construction, capabilities and use of the prototype lab by our three data communications courses. The capabilities and use of the lab in entry level microcomputer communications course, the entry level course, is demonstrated and explained, along with our plans for a larger lab in the near future based on a successful NSF-ILI grant request for additional equipment."
  },
  {
    "title": "Cost trade-offs in hardware support (Panel Discussion)",
    "abstract": "A serious problem facing Computer Science educators is deciding what type of computer resource(s) needs to exist in order to serve Computer Science students. Should these resources include Time-Sharing, micro-processors, one large dedicated computer, and so forth? What are colleges and universities doing to attack this question? A panel of faculty from several colleges and universities of Computer Science education will present views and insights. There will be time for questions and answers from the audience."
  },
  {
    "title": "A Cultural Computing Curriculum",
    "abstract": "Broadening the participation of underrepresented students in computer science fields requires careful design and implementation of culturally responsive curricula and technologies. Culturally Situated Design Tools (CSDTs) address this by engaging students in historic, cultural, and meaningful design projects based on community practices. To date, CSDT research has only been conducted in short interventions outside of CS classrooms. This paper reports on the first semester-long introductory CS course based on CSDTs, which was piloted with 51 high school students during the 2017-2018 school year. The goal of this study was to examine if a culturally responsive computing curriculum could teach computer science principles and improve student engagement. Pre-post tests, field notes, weekly teacher meetings, formative assessments, and teacher and student interviews were analyzed to assess successes and failures during implementation. The results indicate students learned the conceptual material in 6 months rather than in the 9 months previously required by the teacher. Students were also able to apply these concepts afterward when programming in Python, implying knowledge transfer. However, student opinions about culture and computing didn't improve, and student engagement was below initial expectations. Thus we explore some of the many challenges: keeping a fully integrated cultural curriculum while satisfying CS standards, maintaining student engagement, and building student agency and self-regulation. We end with a brief description for how we intend to address some of these challenges in the second iteration of this program, scheduled for fall 2018. After which a study is planned to compare this curriculum to others."
  },
  {
    "title": "An Analysis of Middle Grade Teachers' Debugging Pedagogical Content Knowledge",
    "abstract": "There is an increasing need for knowledgeable K-12 computer science (CS) teachers. It is necessary to inform teachers how to debug and help their students debug programs. Research has shown that debugging is difficult for novices because the process requires different skills from creating programs and instructing students how to debug can help them acquire these skills. To this end, we developed a CS professional development for middle grade teachers (grades 5th-8th/ages 10-13) that includes lessons on debugging. The teachers completed debugging activities that involved finding bugs in Scratch programs and explaining how they would help their students in debugging. We qualitatively analyzed their responses and found that teachers successfully identified the problem but they struggled to locate it in the code. In considering how they would help students who had such a bug, the teachers often focused on helping the student find a solution for the bug rather than on identifying the problem or its source. Finally, teachers' ability to identify bugs and the pedagogical strategies to engage students in this process differed based on CS teaching experience and prior CS knowledge. This work contributes to our understanding of teachers' debugging abilities and advances our knowledge on how to support teachers in teaching their students how to debug their programs."
  },
  {
    "title": "Student reactions to classroom lecture capture",
    "abstract": "This paper evaluates the benefits and drawbacks of lecture recording, which aspects of lectures and lecture capture systems are most used, and what additional features and functions would make the experience more effective. We evaluated 4 computer science courses recorded during spring 2011 using our comprehensive lecture capture system PAOL and presented with webMANIC. We discuss the results of student surveys and focus groups and compare these with prior surveys that investigated how students reacted to the availability of online lecture content and how they used these resources in large- and small-scale deployments with both home-grown and commercial lecture capture technologies. The primary motivation for this study was to analyze how lecture capture fits in the context of computer science curricula and pedagogy and about how we can enhance our systems to be more educationally effective."
  },
  {
    "title": "Houston, we have a problem: there's a leak in the CS1 affective oxygen tank",
    "abstract": "The affective domain can be used to support the internalization of cognitive content and foster the development of curriculum and industry-related interests, attitudes, values, and practices. This study investigated correlations between affective factors and course grade. Interest, perceived competence, effort, lack of pressure, and value correlated significantly with CS1 course grades. Moreover, this study investigated the levels of these factors over the course of CS1. Almost all of the levels of these significant factors decreased significantly during the CS1 course as measured by pretests and posttests. Results of this study further indicated that the use of specific affective objectives and instructional strategies lessened these decreases."
  },
  {
    "title": "Guiding Students to Discover CS Concepts and Develop Process Skills Using POGIL",
    "abstract": "This virtual workshop introduces Process Oriented Guided Inquiry Learning (POGIL) to anyone who teaches CS or related subjects. In a POGIL classroom, teams of 3-4 learners work on activities with a particular structure based on learning cycles. Through scripted inquiry and investigation, learners discover concepts and construct their own knowledge. Using assigned team roles and other scaffolding, learners develop process skills and individual responsibility. The teacher is not a lecturer, but an active facilitator who helps all students to be engaged and achieve the learning objectives. POGIL is an evidence-based approach that has been shown to improve student performance significantly. Workshop participants will work through POGIL activities as students and complete meta-activities designed to introduce core POGIL concepts, practices, and benefits. We will share POGIL materials for a variety of CS courses. For more information, see http://IntroCSpogil.org and http://pogil.org, to find activities for CS1, CS2, and other courses."
  },
  {
    "title": "Using microlabs to teach modern distributed computing",
    "abstract": "Closed labs have become a common feature in computer science education because they provide hands-on experience in a supervised setting. Microlabs extend this approach into the lecture format with very short hands-on activities in the \"middle of\" the lecture. This approach was developed for a modern distributed computing course that integrated all levels of parallelism (multicore, cluster, and grid) into a single course and required a substantial course project that used all these levels. After presenting the current status of our activities, we will discuss future directions that include stand-alone distributed computing modules and a distributed computing repository. This work is supported, in part, by a National Science Foundation grant."
  },
  {
    "title": "Motivating freshmen engineering students",
    "abstract": "In an effort to lower the rate of attrition of Engineering students, during the early years of their education, the University of Nebraska - Lincoln has instituted a series of two freshman engineering courses which are designed to motivate and retain these students. A description of each of these courses and the motivating factors of each are discussed. Creative plots and conceptual engineering design projects are used as a means of holding interest and teaching the basic engineering skills.\n Surveys taken over a number of years have shown an increase in the retention of engineering students since these courses were instituted. These surveys are discussed."
  },
  {
    "title": "Student ICTD Research and Service Learning Abroad (Abstract Only)",
    "abstract": "This BOF is intended to allow faculty interested in global service learning, Information and Communication Technology and Development (ICTD) research, and other cross-cultural experiences an opportunity for information sharing. It takes a lot to get students out into the field. Challenges include developing partnerships, negotiating agreements, vetting the safety of destinations, identifying sources of funding, navigating the logistics of immunizations, visas, accommodations and flights to less-traveled places, reassuring parents as to the wisdom of their child's participation, managing development partner expectations, advising students' activities, and many more. And how can these experiences be evaluated? This BOF will provide a venue for sharing experiences, information, and identifying potential new collaborations. We will discuss means for sharing best practices, news, materials, and project artifacts. We will also explore opportunities for collaborating on projects and joint proposals."
  },
  {
    "title": "Teaching Computational Thinking with Interventions Adapted to Undergraduate Students' Proficiency Levels",
    "abstract": "Adapting a teaching intervention to the proficiency level of a student improves learning when teaching programming. The goal of this PhD-project is to discover to what extent this holds when teaching computational thinking (CT) skills. I will first determine how teaching interventions can be adapted to CT proficiency levels, and then examine their effectiveness through a series of longitudinal studies."
  },
  {
    "title": "Teaching creative problem solving in a MOOC",
    "abstract": "The practice of discrete optimization involves modeling and solving complex combinatorial problems which have never been encountered before and for which no universal computational paradigm exists. Teaching such skills is challenging: Students must learn, not only the core technical skills, but also an ability to think creatively in order to select and adapt a paradigm to solve the problem at hand. This paper explores the question of whether the teaching of such creative skills translates to massive open online courses (MOOCs). It first describes a methodology for teaching discrete optimization that has been successful on campus over fifteen years. It then discusses how to adapt the campus format to a MOOC version. The success of the approach is evaluated through extensive data analytics enabled by the wealth of information produced by MOOCs."
  },
  {
    "title": "Bringing Social Computing to Secondary School Classrooms",
    "abstract": "Social computing is the study of how technology shapes human social interactions. This topic has become increasingly relevant to secondary school students (ages 11--18) as more of young people's everyday social experiences take place online, particularly with the continuing effects of the COVID-19 pandemic. However, social computing topics are rarely touched upon in existing middle and high school curricula. We seek to introduce concepts from social computing to secondary school students so they can understand how computing has wide-ranging social implications that touch upon their everyday lives, as well as think critically about both the positive and negative sides of different social technology designs. In this report, we present a series of six lessons combining presentations and hands-on activities covering topics within social computing and detail our experience teaching these lessons to approximately 1,405 students across 13 middle and high schools in our local school district. We developed lessons covering how social computing relates to the topics of Data Management, Encrypted Messaging, Human-Computer Interaction Careers, Machine Learning and Bias, Misinformation, and Online Behavior. We found that 81.13% of students expressed greater interest in the content of our lessons compared to their interest in STEM overall. We also found from pre- and post-lesson comprehension questions that 63.65% learned new concepts from the main activity. We release all lesson materials on a website for public use. From our experience, we observed that students were engaged in these topics and found enjoyment in finding connections between computing and their own lives."
  },
  {
    "title": "From Midshipmen to Cyber Pros: Training Minority Naval Reserve Officer Training Corp Students for Cybersecurity",
    "abstract": "Computing is not only a fundamental part of our daily lives - our national security depends on it. It is essential that members of the Reserve Officer Training Corps (ROTC) be well-versed in computing techniques designed to combat cyber-attacks that continually improve in sophistication and frequency levels. Through computer science education, prospective military leaders are being taught the critical and analytical thinking skills necessary to address these threats. This paper outlines and discusses how underrepresented minority Naval Reserve Officer Training Corps (NROTC) midshipmen, with the majority having little-to-no programming skills or background, were taught the foundational aspects of computer science and exposed to specific cybersecurity concepts in a 15-week program. The program produced many insightful outcomes, one being the development of a tool that collected and analyzed publicly available social media data through the application of data mining algorithms and techniques. Additionally, interviews, which were conducted upon the completion of the program, documented notable findings on the program's effectiveness and on key concepts for teaching computer science to minority beginners."
  },
  {
    "title": "A comprehensive representation of the computing and information disciplines",
    "abstract": "In recent years, the discipline of computing has matured to the point of having distinct sub elements, each of which is developing curriculum recommendations, accreditation criteria, conferences, professional societies and publications. Specific curriculum recommendations exist for five distinct areas: (Computing Curricula 2001: Computer Science (CS2001) [4] and IS 2002 Model Curriculum and Guidelines for Undergraduate Degree Programs in Information Systems (IS-2002) [1]), (Computing Curricula 2004: Software Engineering [2] and Computing Curricula: Computer Engineering [5]) and one that will likely be finished early in 2006 (Computing Curricula: Information Technology [6]). More broadly, recent work in the UK to identify the variety of computing related programs currently offered in British universities identified 2,400 distinct program names [3]! This proposal is for an update of a project to keep the family of computing related disciplines together. This project is partially funded by the National Science Foundation (NSF grant 0338546, Special Project: All in the Family: A unified representation of the computing and information related disciplines), and is being run by a joint task force from several professional societies, with ACM taking the lead. The goals of the project are to provide a union of all that is computing, and various ways of organizing and visualiz-"
  },
  {
    "title": "Using visualisation to improve object-oriented thinking (poster)",
    "abstract": "In this paper we describe a learning environment that combines usual features of object oriented programming environments with visualisation and animation of object-oriented applications. The purpose of this learning tool is to improve students' mental models of object-oriented systems."
  },
  {
    "title": "Assessing computer science programs: what have we learned",
    "abstract": "1. SUMMARY How does a department evaluate the effectiveness of its major programs in computer science? In years past it might have been done rather informally by faculty members having a sense of what their students are learning and measuring that against curriculum guidelines developed by national organizations such as ACM and the IEEE Computer Society. Or, maybe faculty members might have made that judgment by the types of jobs their students were obtaining right after they graduate or the number of students who would go on to graduate school in computer science. Nowadays, however, because of both internal and external forces, computer science departments are introducing formal processes. These involve articulating objectives (or goals) and outcomes for their programs and using a variety of instruments to measure success in meeting those objectives and outcomes, all with the idea of using the results to improve the program."
  },
  {
    "title": "Equitable Learning Environments in K-12 Computing",
    "abstract": "The current efforts to expand computer science (CS) education in K-12 schools, such as the “CS for All” initiative, highlight the need for all students to get an opportunity to study computing. However, as recent research has shown, diversity in computing at the K-12 level remains problematic, and additional research is needed to look at how computer science learning environments can impact minority student interest and retention in CS. In this article, we report results from an in-depth qualitative study of high school computer science teachers’ perspective on barriers to increasing diversity in their classes. Based on teachers’ experiences, we provide practical recommendations on how to encourage equitable learning environments in K-12 computer science courses."
  },
  {
    "title": "Is Elementary AI Education Possible?",
    "abstract": "As artificial intelligence (AI) technology becomes increasingly pervasive, it is critical that students recognize AI and how it can be used. There is little research exploring learning capabilities of elementary students and the pedagogical supports necessary to facilitate students' learning. PrimaryAI was created as a 3rd-5th grade AI curriculum that utilizes problem-based and immersive learning within an authentic life science context through four units that cover machine learning, computer vision, AI planning, and AI ethics. The curriculum was implemented by two upper elementary teachers during Spring 2022. Based on pre-test/post-test results, students were able to conceptualize AI concepts related to machine learning and computer vision. Results showed no significant differences based on gender. Teachers indicated the curriculum engaged students and provided teachers with sufficient scaffolding to teach the content in their classrooms. Recommendations for future implementations include greater alignment between the AI and life science concepts, alterations to the immersive problem-based learning environment, and enhanced connections to local animal populations."
  },
  {
    "title": "Infrastructor: Flexible, No-Infrastructure Tools for Scaling CS",
    "abstract": "Demand for computer science education has skyrocketed in the last decade. Although challenging everywhere, scaling up CS course capacities is especially painful at small, liberal arts colleges (SLACs). SLACs tend to have few instructors, few large-capacity classrooms, and little or no dedicated IT support staff. As CS enrollment growth continues to outpace the ability to hire instructional staff, maintaining the quality of the close, nurturing learning environment that SLACs advertise-and students expect-is a major challenge. We present Infrastructor, a workflow and collection of course scaling tools that address the needs of resource-strapped CS departments. Infrastructor removes unnecessary administrative burdens so that instructors can focus on teaching and mentoring students. Unlike a traditional learning management system (LMS), which is complex, monolithic, and usually administered by a campus-wide IT staff, instructors deploy Infrastructor themselves and can trivially tailor the software to suit their own needs. Notably, Infrastructor does not require local hardware resources or platform-specific tools. Instead, Infrastructor is built on top of version control systems. This design choice lets instructors host courses on commodity, cloud-based repositories like GitHub. Since developing Infrastructor two years ago, we have successfully deployed it in ten sections of CS courses (323 students), and over the next year, we plan to more than double its use in our CS program."
  },
  {
    "title": "Do Behavioral Factors Influence the Extent to which Students Engage with Formative Practice Opportunities?",
    "abstract": "With the increasing interest and enrollment in programming courses, educators must discover innovative and inclusive teaching methods to effectively cater to diverse learner needs and varying levels of prior knowledge. Introductory programming courses (CS1) can prove arduous for novices and insufficiently stimulating for those with experience, creating an educational dilemma. Striking a balance between students' expectations and engagement becomes challenging for educators, especially given the expanding pre-higher education CS exposure. To tackle this challenge, offering optional extra practice opportunities could aid students in mastering concepts, particularly those benefitting from rigorous practice. However, personal motivation and other factors may hinder their engagement, undermining potential benefits. To enhance engagement, providing a minor amount of extra credit as an extrinsic incentive might be effective. In this context, students' engagement with extra credit quizzes (ECQs) is influenced by various factors, with self-regulation and time management playing a pivotal role. This study delves into the correlation between students' weekly ECQ submission time and their total quiz interactions. Specifically, it examines whether the timing of weekly ECQ submissions varies based on the number of quizzes engaged. The analysis also explores group discrepancies in submission times, considering factors like gender and prior programming experience (PPE) relative to ECQ engagement. Ultimately, these insights could reshape educational approaches to better address student needs."
  },
  {
    "title": "Monitoring and evaluating a redesigned first year programming course",
    "abstract": "A collaborative project between the Computing faculty and the Education faculty of Monash University was aimed at improving the teaching and learning of first year programming. After initial research had identified the problems, some improvements were attempted during 1996. One department was willing and able to make major changes to its subjects immediately. The sequence of two first year programming subjects was restructured and redesigned. The progress of the project was monitored via direct observation, email and the World Wide Web. An improvement in the percentage of students who achieved very good results marked the project as a success."
  },
  {
    "title": "A Global Survey of Introductory Programming Courses",
    "abstract": "We present results of an in-depth survey of nearly 100 introductory programming (CS1) instructors in 18 countries spanning six continents. Although CS1 is well studied, relatively few broadly-scoped studies have been conducted, and none prior have exceeded regional scale. In addition, CS1 is a notoriously fickle and often changing course, and many might find it beneficial to know what other instructors are doing across the globe; perhaps more so as we continue to understand the impact of the COVID-19 pandemic on computing education and as the effects of Generative AI take hold. Expanding upon several surveys conducted in Australasia, the UK, and Ireland, this survey facilitates a direct comparison of global trends in CS1. The survey goes beyond environmental factors such as languages used, and examines why CS1 instructors teach what they do, in the ways they do. In total the survey spans 84 institutions and 91 courses in which a total of over 40,000 students are enrolled."
  },
  {
    "title": "Introducing propositional logic and queueing theory with the infotraffic interactive learning environments",
    "abstract": "InfoTraffic [2] is a collection of learning environments forteaching fundamental concepts of computer science and mathematics. So far, the two programs LogicTraffic, targeted at propositional logic, and QueueTraffic, targeted at queueing theory have been released1. Both are freely availableand can be downloaded (along with teaching materials) from [1]. This demonstration abstract gives a very brief introductionto these two programs and their use in class."
  },
  {
    "title": "Human computer interaction that reaches beyond desktop applications",
    "abstract": "Recently, several frameworks have been developed for writing mobile and web applications in Java, making the development of web and mobile applications accessible to HCI students with only a CS1 Java background. In this paper we describe using student projects based on the Google Android mobile platform and Google's Web Toolkit to provide students with experience designing and implementing user interfaces for mobile and web applications. Specific examples demonstrate how programming on these platforms reinforces standard HCI topics. As a result of being able to learn mobile device programming in the context of \"cool\" Google platforms, students expressed increased interest in studying HCI."
  },
  {
    "title": "Using expert systems to understand object-oriented behavior",
    "abstract": "Objeet-oriented design methods describe a software system primarily from two perspectives: object structure and dynamic behavior [1, 2, 3]. While the former seems intuitive because it is based on concepts derived from the real world problem, tie latter often introduces confhsion for students. An object-oriented system is described as a collection of interacting objects. Each object’s behavior is specified separately through a state transition diagram. The overall system’s behavior is captured through a set of scenarios, In a sense, a scenario is a sequence of events that occurs during a specific use of the system, including stimuli to or from the user or external devices, and interactions between objeets. Scenarios are useful for elaborating and validating requirements, investigating some behavioral properties, as well as evaluating completeness and internal consistency [1, 4]. However, there is no adequate support for use of scenarios in teaching object-oriented design. A scenario description may show object-to-object interactions either in a graphical form or in a textual forq but, answers to “why”, “how”, and “what if” questions, that arise while students are learning a new technique, are not readily available. Moreover, it is not without difficulty for students to extract scenarios from separate state transition diagrams. The lack of tracing capability hinders them from forming a “big picture” about objectoriented systems. To overcome these difficulties, we used rule-based expert systems as an instructional tool. An expert system can be constmeted to simulate and reason about the dynamic behavior of an object-oriented system specified"
  },
  {
    "title": "Educational technology over 25 years (panel): understanding the conditions when it works",
    "abstract": "Towards making concrete, defensible statements about the impact that technology has had on education, we are reviewing the literature with a new tool that we have developed. IJsing our “Conditions Profile” we are analysing empirical studies to ferret out the key factors that contributed to the impact (or no impact) of the technology on learning. Thus, rather than focusing on what works, we are trying to understand the conditions when the technology works (and doesn’t’ work)."
  },
  {
    "title": "A study of barriers to women in undergraduate computer science.",
    "abstract": "Worldwide, there is a significant discrepancy between the numbers of male and female graduates from computer science programs. SUNY Geneseo offers no exception. The literature cites a number of plausible explanations for the problem, but no definitive answers. We conducted a study to determine why few women complete our own computer science major. Our major finding is that (at least on our campus) the problem is not actually one of retention. Few women---even those in the introductory computer science courses---actually plan to major in computer science to begin with. Although some barriers suggested in the literature do operate within the major, they seem much less significant than the low entry rates. Retention of women once they enter the major is important, but it is secondary to getting women into the major initially. This suggests that the most effective solutions will be those that concentrate not on retention but on recruitment (including outreach to secondary schools)."
  },
  {
    "title": "Supporting Upper Elementary Students in Multidisciplinary Block-Based Narrative Programming",
    "abstract": "Digital storytelling, which combines traditional storytelling with digital tools, has seen growing popularity as a means of creating motivating problem-solving activities in K-12 education. Though an attractive potential solution to integrating language arts skills across topic areas such as computational thinking and science, better understanding of how to structure and support these activities is needed to increase adoption by teachers. Building on prior research on block-based programming for interactive storytelling, we present initial results from a study of 28 narrative programs created by upper elementary students that were collected in both classroom and extracurricular contexts. The narrative programs are evaluated across multiple dimensions to better understand the types of narrative programs being created by the students, characteristics of the students who created the narratives, and what types of support could most benefit the students in their narrative program construction. In addition to analyzing the student-created narrative programs, we also provide recommendations for promising system-generated and instructor-led supports."
  },
  {
    "title": "A CS1 course based on stand-alone microcomputers",
    "abstract": "Summar y This paper describes an introductor y Computer Science course very similar t o Course CS1 as described in the recen t \"Curriculum Recommendations for th e Undergraduate Program in Computer Science \" published by SIGCSE. The students complet e homework using the PASCAL language, an d take automated quizzes, using stand-alon e microcomputers with both graphic an d alphanumeric display capabilities. Th e course organization is similar to Keller' s Personalized System of Instruction (PSI). Typical enrollment is 500 per quarter, ye t the course consistently receives ver y favorable ratings from student attitud e surveys. Cost effective instruction i s achieved through use of : a) th e microcomputers ; b) experience d undergraduates as PSI \"proctors\" ; c) emphasis on team solution of homewor k problems. Course materials are availabl e to other campuses and consist of publishe d textbook, PASCAL based software syste m (quasi machine independent), and automate d quizzes and bookkeeping programs. Presentation of the paper will includ e demonstration of various aspects of thi s course. The packaged form of the cours e materials suggests that it should now b e possible to \"publish\" complete courses o f a new type in ways that make better use o f scarce faculty resources, while achievin g more effective instruction. 1. Backgroun d The course described in this paper aros e as a combination of four distinc t activities that may be of interest t o SIGCSE members. First, we sought to us e small stand-alone microcomputers as a means of increasing dramatically th e access of students to interactive compute r problem solving facilities fo r introductory level courses. Second, w e wanted to use PASCAL as the basis for th e introductory computer problem solving an d programming course offered to all student s at UCSD. Third, we selected proble m examples involving manipulation of graphi c images and character strings, whil e deemphasizing algebraic examples, as a means to reach the many students who lac k confidence in mathematics. Fourth, w e decided to use the Personalized System o f Instruction (PSI) both to make schedulin g of the microcomputers practical, and t o achieve more effective instruction. Several aspects of the resultin g combination lead to the suggestion tha t courses constructed along similar lines , in computer science as well as it sthe r science and engineering subjects, migh …"
  },
  {
    "title": "Demystifying networking: teaching non-majors via analogical problem-solving",
    "abstract": "The goals of a typical Networking course for Computer Science majors include getting students to learn the relevant concepts, delving into details of various protocols, and using Networking utilities. Such focus on low-level details is unlikely to be interesting to non-majors. Also, there is a larger danger of students not understanding the basic concepts due to the perceived complexity in the details and technical jargon. We address both these issues by teaching Networking concepts through solving problems in analogical real-life scenarios. The main idea of our approach is: The instructor poses an analogy problem, students work in groups to devise solutions, followed by a class discussion to map the analogy problem as well as its solution to their corresponding technical details in Networking domain. Thus we emphasize the core concepts of Networking and demystify the specialized technical details. Across three offerings of this course, we have found that: (i) our students' performance on typical Networking questions is comparable or higher than traditionally taught students, (ii) students can solve unseen technical problems, (iii) students' confidence in tackling technical questions is high."
  },
  {
    "title": "Incorporating an intelligent tutoring system into CS1",
    "abstract": "Intelligent tutoring systems (ITSs) have been used to complement classroom instruction in recent years, and have been shown to facilitate learning. We incorporate an ITS named Intelligent Learning Materials Delivery Agent (ILMDA) into our CS1 course and collect evidence to validate two hypotheses: (1) The ITS improves student learning, (2) The ITS \"learns\" to tutor the students more efficiently and/or effectively. Our method of inquiry includes collecting data tracked while a student interacts with the ITS, post-test scores, and exam scores. We also use control and treatment groups, as well as different versions of the ILMDA in our experiments. Based on the results, we see indications that support the above two hypotheses."
  },
  {
    "title": "Computer programming in high school vs. college",
    "abstract": "Although there exists a computer science certification exam for high school teachers in some states, there appear to be no general requirements for teaching computer science at the high school level in most states. This may imply that CS material taught at the high school level is not always well-suited for students who want to pursue CS in college.This paper discusses some observations on what skills and abilities are important to prepare high school students for a successful career in CS at the college level. It also discusses preconceived ideas of college freshmen on what computer programming is all about."
  },
  {
    "title": "Gender, confidence, and mark prediction in CS examinations",
    "abstract": "A common refrain heard by instructors of CS1 courses is ``I'm sure I did better than that\" or ``I have no idea how I got that mark\". Sometimes differences in a student's expected and reported marks may be due to a mistake on the part of the grader of the work, but more often than not this is an indicator that a student is not accurately assessing their own level of achievement on a piece of work. This may be an issue of capability (some students may lack the tools to assess what they have done correctly or incorrectly?) or one of confidence (some students are certain they are making mistakes even if they have done everything correctly). Regardless of the source of the gap between predicted and reported grades, it is an important skill for students to be able to accurately assess their own capabilities and performance. In this work, we asked students in a CS1 course to predict their own grades on each question of their final examination. Analyzing the actual and predicted grades, and the differences between them leads to several interesting results. Poorer performing students are more likely to overestimate their grades, while better performing students are more likely to underestimate their grades. Furthermore, performance on the exam is strongly correlated with ability to correctly predict marks. Perhaps most interestingly, we found that while there was no difference in performance of male and female students on the exam, female students were more likely to under predict their performance than their male counterparts."
  },
  {
    "title": "Linuxgym: software to automate formative assessment of unix command-line and scripting skills",
    "abstract": "This demonstration illustrates the way in which Linuxgym automatically assesses Unix command-line and scripting skills through practical activities. It is shown that the mechanism provides a substantial amount of formative feedback, and that data it accumulates can be coalesced into a report indicating to the teacher topics requiring better coverage."
  },
  {
    "title": "Making the hardware-software connection with PLP",
    "abstract": "In this paper, we describe a novel platform for Computer Science and Engineering education that helps students to connect software concepts with the underlying hardware. Students often learn about programming languages, computer architecture, assembly languages and compilers in isolation, and fail to see the connections between the hardware and the software. The Progressive Learning Platform (PLP) was designed for students to anchor their conceptual learning about microprocessors and computer architecture, and for them to see the connections between assembly language and trade-offs in architecture. The long-term vision for PLP is to be a free and scalable platform for face-to-face and online education in computing worldwide."
  },
  {
    "title": "The use of MUVE technology in teaching AI algorithms",
    "abstract": "The Second-Life (SL) MUVE (Multi-User Virtual Environment) is not often used for teaching core curriculum in computing. We made a simulation set in SL to illustrate key AI algorithms, and deployed them in labs to help the students visualize them."
  },
  {
    "title": "Board of symbols: a tool for teaching programming",
    "abstract": "This paper describes a graphical user interface based on a rectangular board with symbols. A set of functions is provided to change the symbols in shape, color and size. The approach is used in courses for programming beginners."
  },
  {
    "title": "Building upon and enriching grade four mathematics standards with programming curriculum",
    "abstract": "We found that fifth grade students' scores on Scratch programming quizzes in a summer enrichment course were highly correlated with their scores on a standardized test for mathematics. We identify ways in which the programming curriculum builds upon target skills from the Mathematics Content Standards for California Public Schools. We hypothesize that the programming curriculum leveraged and enriched students' mathematics content knowledge."
  },
  {
    "title": "When Everyone Knows CS is the Best Major: Decisions about CS in an Indian context",
    "abstract": "Much of the existing work on student experiences in the CS major focuses on CS in American and European contexts. This paper explores the experience of CS students who due to India's unusual educational system, joined CS with very little knowledge about CS outside of its reputation. The study was a grounded-theory based interview study based on 20 students at 2 tiers of schools in India. Results suggest that although students generally enjoyed the CS content of their courses, they had a great deal of concern about the lack of freedom in professional programming. This is surprising considering the highly positive view of CS jobs is what initially seems to attract students to the major. We contrast this with educational findings in other contexts and discuss the educational implications of the result."
  },
  {
    "title": "An Effective Approach to Enhancing Compiler Error Messages",
    "abstract": "One of the many challenges novice programmers face from the time they write their first program is inadequate compiler error messages. These messages report details on errors the programmer has made and are the only feedback the programmer gets from the compiler. For students they play a particularly essential role as students often have little experience to draw upon, leaving compiler error messages as their primary guidance on error correction. However these messages are frequently inadequate, presenting a barrier to progress and are often a source of discouragement. We have designed and implemented an editor that provides enhanced compiler error messages and conducted a controlled empirical study with CS1 students learning Java. We find a reduced frequency of overall errors and errors per student. We also identify eight frequent compiler error messages for which enhancement has a statistically significant effect. Finally we find a reduced number of repeated errors. These findings indicate fewer students struggling with compiler error messages."
  },
  {
    "title": "A methodology for active, student-controlled learning: motivating our weakest students",
    "abstract": "This paper outlines a methodology to improve the performance of the weakest students through networked hypermedia and in-class exercises. These efforts are an outgrowth of experiments using networked hypermedia in the form of the World Wide Web (WWW) as the basis for networked courseware [1-4]. While initial approaches significantly enhanced the performance of the average and best students, there was no noticeable gain in the performance of the weakest students [4]. They continued to come into class without preparing and expected to somehow condense the learning process into five 55-minute sections every two weeks. In order to enhance the performance of these students, a series of procedures were developed that should increase their performance while minimizing any negative impact on the rest of class. The first procedure uses a networked, Common Gateway Interface (CGI), form-based Student Response System to enhanced communications and expectations between the student and professor. The Student Response System automates the grading of homework assignments, and as a result, facilitates nightly homework assignments without increasing the grading load on the professor. The second component of this methodology involves developing a series of graded, in-class, group exercises that can be easily graded in-class, represents a substantial portion of the final grade, and requires a public presentation of the group's results. Together, these tools and practices form a methodology for reaching the weakest students and enhancing their performance."
  },
  {
    "title": "FIRST Principles to Design for Online, Synchronous High School CS Teacher Training and Curriculum Co-Design",
    "abstract": "The Covid-19 pandemic has offered new challenges and opportunities for teaching and research. It has forced constraints on in-person gathering of researchers, teachers, and students, and conversely, has also opened doors to creative instructional design. This paper describes a novel approach to designing an online, synchronous teacher professional development (PD) and curriculum co-design experience. It shares our work in bringing together high school teachers and researchers in four US states. The teachers participated in a 3-week summer PD on ideas of Distributed Computing and how to teach this advanced topic to high school students using NetsBlox, an extension of the Snap! block-based programming environment. The goal of the PD was to prepare teachers to engage in collaborative co-design of a 9-week curricular module for use in classrooms and schools. Between their own training and the co-design process, teachers co-taught a group of high school students enrolled in a remote summer internship at a university in North Carolina to pilot the learned units and leverage ideas from their teaching experience for subsequent curricular co-design. Formative and summative feedback from teachers suggest that this PD model was successful in meeting desired outcomes. Our generalizable FIRST principles—Flexibility, Innovativeness, Responsiveness (and Respect), Supports, and Teamwork (collaboration)—that helped make this unique PD successful, can help guide future CS teacher PD designs."
  },
  {
    "title": "Black Women Speak: Examining Power, Privilege, and Identity in CS Education",
    "abstract": "Despite the increasing number of women receiving bachelor’s degrees in computing (i.e., Computer Science, Computer Engineering, Information Technology, etc.), a closer look reveals that the percentage of Black women in computing has significantly dropped in recent years, highlighting the underrepresentation of Black women and its negative impact on broadening participation in the field of computing. The literature reveals that several K-16 interventions have been designed to increase the representation of Black women and girls in computing. Despite these best efforts, the needle seems to have barely moved in increasing the representation or the retention of Black women in computing. Instead, the primary goals have been to recruit and retain women in the CS pipeline using gender-focused efforts intended to increase the number of women who also identify as members of racialized groups. However, these gender-focused efforts have fallen short of increasing the number of Black women in computing because they fail to acknowledge or appreciate how intersectionality (the overlapping social constructs of gender, race, ethnicity, class, etc.) has shaped the lived experiences of Black women navigating the computing pipeline. Without honest dialogue about how power operates in the field of computing, the push for racial equality and social justice in CS education remains an elusive goal. Leveraging intersectionality as a critical framework to address systemic oppression (i.e., racism, gender discrimination, power, and privilege), we interview 24 Black women in different phases of the computing pipeline about their experiences navigating the field of computing. An intersectional analysis of Black women’s experiences reveals that CS education consists of saturated sites of violence in which interconnected systems of power converge to enact oppression. Findings reveal three primary saturated sites of violence within CS education: (1) traditional K-12 classrooms; (2) predominantly White institutions; and (3) internships as supplementary learning experiences. We conclude the article with implications for how the field of CS education can begin to address racial inequality that negatively impacts Black girls and women, thus contributing to a more equitable and socially just field of study that benefits all students."
  },
  {
    "title": "A course in program verification for programmers",
    "abstract": "In this paper we describe a cours e we will teach on an experimental basi s in summer, 1978 ; we like to refer to th e course content as \"program verification for programmers\" . At a time when more and more people are lamenting the fact that an inordinate amount of software development time is spent in debugging, w e feel it is important to include in ou r curriculum a course whose primary emphasis is on techniques for writing correc t programs . When we speak of program correctness, we are referring to the consistency between a computer program and th e specifications describing what it is sup pose to do . In our course we will develop the concept of verifying a program' s correctness in primarily a non-mathematical manner . While we do not hope o r necessarily think it desirable that a student attempt to produce rigorou s proofs of a program ' s correctness, we do think that he or she should design an d write a program with a correctness proo f in mind so that their confidence in th e reliability of the program is at a high level ."
  },
  {
    "title": "On using C++ and object-orientation in CS1: the message is still more important than the medium",
    "abstract": "Most current approaches to modernizing CS1 revolve around the use of C++ and/or object-orientation. Although the two are not exclusively tied to one another, it is important to pause and consider the potential pitfalls of current approaches. Having identified those pitfalls, this paper presents an approach to CS1 that avoids those pitfalls while focusing students' attention on the real message: software reusability."
  },
  {
    "title": "The five year evolution of a game programming course",
    "abstract": "This paper presents lessons learned from five years of teaching a game design and programming outreach course. This class is taught over the course of a month to high school students participating in the California Summer School for Mathematics and Science (COSMOS) at the University of California, Santa Cruz. Over these five years we have changed everything in the course, from the overall project structure to the programming language used in the class. In this paper we discuss our successes and failures, and offer recommendations to instructors offering similar courses."
  },
  {
    "title": "Effective Succinct Feedback for Intro CS Theory: A JFLAP Extension",
    "abstract": "Computing theory is often perceived as challenging by students, and verifying the correctness of a student's automaton or grammar is time-consuming for instructors. Aiming to provide benefits to both students and instructors, we designed an automated feedback tool for assignments where students construct automata or grammars. Our tool, built as an extension to the widely popular JFLAP software, determines if a submission is correct, and for incorrect submissions it provides a \"witness\" string demonstrating the incorrectness. We studied the usage and benefits of our tool in two terms, Fall 2019 and Spring 2021. Each term, students in one section of the Introduction to Computer Science Theory course were required to use our tool for sample homework questions targeting DFAs, NFAs, RegExs, CFGs, and PDAs. In Fall 2019, this was a regular section of the course. We also collected comparison data from another section that did not use our tool but had the same instructor and homework assignments. In Spring 2021, a smaller honors section provided the perspective from this demographic. Overall, students who used the tool reported that it helped them to not only solve the homework questions (and they performed better than the comparison group) but also to better understand the underlying theory concept. They were engaged with the tool: almost all persisted with their attempts until their submission was correct despite not being able to random walk to a solution. This indicates that witness feedback, a succinct explanation of incorrectness, is effective. Additionally, it assisted instructors with assignment grading."
  },
  {
    "title": "\"It is what the situation demands\": How Communities of Practice Create Value for CS Teachers in the Time of Covid",
    "abstract": "The recent pandemic has resulted in challenges to the prioritization of CS curriculum and strained the structures that support and grow the professional development and identity building of the teachers who implement it. In this poster we examine how local chapters of a national CS teacher advocacy organization (the CSTA) support their members during a time of transition and change. Using focus group data collected from an ongoing multi-year longitudinal research project, we tried to better understand the challenges that these entities faced as their normal structures of communication and outreach were closed off, and how such challenges might affect the perceptions of the role that local chapters play in supporting the continued development of their members, including their identity as CS teachers."
  },
  {
    "title": "A Clustering Method to Detect Disengaged Students from Their Code Submission History",
    "abstract": "Computer Science educators benefit from knowing which of their students need help or feel the material is difficult. Collecting this information is, typically, done via surveys. However, surveying students is time-consuming and not every student answers. Additionally, with surveys, teachers identify struggling students only after-the-fact, when nothing can be done to help them. This paper proposes a machine learning approach to cluster students into groups with similar features; the weak-performing learners, who consider the material and/or programming difficult, the average-performing learners, who are learning the material normally, and the best-performing learners, who consider programming to be an easy task and do not need additional assistance. The clustering is data-driven as it is based on the collection of code snapshots (i.e., submissions). The clusters are then formed from a transition probability matrix, computed using the submission history of the student, and a state machine. We demonstrate the effectiveness of the clustering approach to create clusters with significant differences in perceived student difficulty by cross-validating the formed clusters with survey data collected from a CS1 course. The clusters also contain differences in programming behavior. The proposed method can be applied to the classroom setting to identify students benefitting from assistance during the course in real-time, without surveys."
  },
  {
    "title": "Using terminals versus card reader in remote job entry",
    "abstract": "As enrollment in computer science departments continues to increase, institutions are finding it necessary to improve existing computer facilities. Many have chosen the “distributive processing” route whereby one central location handles a major portion of the workload of the schools connected to it, while each of the schools maintain some stand-alone capability. Schools are billed for work that is performed at the network center.\n In particular, student jobs are charged, whether individually or collectively, to a particular school or department. It is, thus, worthwhile to consider techniques for processing student jobs which will keep operating costs of a department to a minimum. This paper considers an approach that the University of Tennessee-Chattanooga (UTC) has taken to help minimize these costs.\n An experiment was designed in which, for one semester, students would continue to submit programs through the card reader. The succeeding semester, jobs would be submitted through terminals, i.e. no card punching would be done and students would transmit to Knoxville using the terminals. The “bonus point” method was employed in both cases. The courses selected were FORTRAN AND PL/I, the first two courses in the computer science curriculum and the major users (from UTC) of the network. The FORTRAN class used the WATFIV compiler and included some usage of the structured constructs available. Approximately seventy per cent of the students enrolled in this course were in majors other than computer science. The second course selected was PL/I which used the PL/C compiler at UTK. Approximately ten per cent of the students were non-computer science majors."
  },
  {
    "title": "Preconceptions of Artificial Intelligence and their change through co-constructed explorations",
    "abstract": "Most explainable AI (XAI) approaches focus on mathematically correct and complete explanations. In contrast to that, everyday explanations are social practices that are influenced by many factors, e.g. the social and institutional context of the explanation. Everyday explanations are therefore co-constructed by both the explainer and the explainee. Assuming that everyday co-constructed explanations are easy to understand for citizens, they can help to make AI understandable for people who do not have affinity for technology. In this context, concrete and simplified examples that are adapted to the needs of the learner can reduce the complexity of the explanation furthermore. This Ph.D. project investigates the effects of co-constructed explanations created while exploring notional machines on the mental models of AI of everyday people. The goal is to identify aspects of AI technology which are relevant for everyone, to empower people to become a responsible and active members of society in a digitalized world where AI technology is ubiqitious."
  },
  {
    "title": "An operating systems programming laboratory course",
    "abstract": "Some inherent difficuties are present for good exercise and practice in operating systems programming laboratory course. This paper gives a fairly manageable laboratory course plan for programming operating systems (OSs) and a teaching tool which is used in it. The plan enables a prototype operating system as a whole, including the nucleus and multiprogramming mechanism, to be written in high level language. The operating system can run a binary machine program as job program. It is realized through simulation in a common programming environment. Some drawbacks of the plan are discussed and solutions are also given."
  },
  {
    "title": "Micro: bit Magic: Engaging K-12, CS1/2, and Non-majors with IoT & Embedded",
    "abstract": "Are you interested in a fun way to introduce a variety of students to significant contemporary CS topics, like wireless networking, robotics, and the Internet of Things (IoT)? Do you want to do so using a platform that is cheap, has a low-barrier to entry, but where learning can translate to the real world and where advanced students can pursue advanced topics? If so, you need a micro:bit! The micro:bit is a platform developed by the British Broadcasting Corporation (BBC) to encourage children to pursue computing and electronics. Although designed for children, its capabilities are sufficient for a variety of postsecondary applications. It includes a 32-bit processor, lights, buttons, an accelerometer, digital I/O, and wireless communication, making it ideal for wearables and robotics. It also leverages some of the latest trends in introductory computing, like support for block-based languages (àla Scratch), while also being sophisticated enough for complex topics in Operating Systems and Networking This workshop will introduce the micro:bit and focus on engaging, lightweight coverage of complex topics, including robotics, mesh networks, and IoT. Participants will work through classroom-ready exercises suitable for K-12 workshops, student recruiting events, CS0/1/2, or as bootstrap topics in IoT courses. The workshop will include some subjects not commonly covered in existing micro:bit material, like integration with mobile apps and IoT applications. Participants will be provided with hardware but will need a laptop with internet access and a mobile device (any OSes, but some features work better with iOS)."
  },
  {
    "title": "Time-constrained Code Recall Tasks for Monitoring the Development of Programming Plans",
    "abstract": "Programmers rely on the recognition and utilization of reoccurring code sequences to understand and create code. Knowledge of these sequences --programming plans -- has been shown to be a factor that differentiates novice programmers from experts. Although the information on the development of programming plans would be beneficial to both teachers and students, explicitly following their development over a longer time period is scarce. In this article, we describe an easy-to-apply methodology for monitoring the development of programming plans. The development of programming plans is evaluated with time-constrained code recall tasks, where students are shown snippets of code for a short period of time, after which they write the snippets they saw. To determine the existence of programming plans, the short duration is designed so that reading the shown code is not feasible in the given time period. We demonstrate the methodology through an experiment in which we studied the development of programming plans in students in a beginner web programming course."
  },
  {
    "title": "Adding a contributing student pedagogy component to an introductory database course",
    "abstract": "An introductory database course is well established within computer science curricula. Instructors in this course are challenged to select a subset of possible topics to cover and emphasize and also to design appropriate assignments to help students master those topics. As theories regarding effective educational practice continue to emerge and become known, we also seek to invigorate our courses by including some of these newer techniques.\n Contributing Student Pedagogy is an umbrella term that refers to a family of techniques that involves finding ways for students to become directly involved in the production of course content utilized by other students. Students not only make use of content provided by other students, but they come to view that content as valuable. This paper reports on initial efforts to incorporate an assignment based on contributing student pedagogy into a standard database course. Several iterations took place, with improvements made between the first and second iterations. Plans for future iterations are included and implications, not only for the database course, but other Computer Science courses, are discussed."
  },
  {
    "title": "Using Learning Analytics to Interrogate Learning Theories: An Exploration of How Students Learn to Program",
    "abstract": "A variety of approaches have been used in computer science education research; one relatively new addition is the use of very large data sets. This dissertation will use one of these data sets in order to investigate the process by which novice students learn to program. Specifically, an iterative approach will be used to determine which learning theories are (or are not) supported by the data. The focus will be on which patterns of behavior do (or do not) lead a student to learning a programming concept."
  },
  {
    "title": "Prompt Engineering for Large Language Models to Support K-8 Computer Science Teachers in Creating Culturally Responsive Projects",
    "abstract": "The power of large language models has opened up opportunities for educational use. In computing education, recent studies have demonstrated the potential of these models to improve learning and teaching experiences in university-level programming courses. However, research into leveraging them to aid computer science instructors in curriculum development and course material design is relatively sparse, especially at the K-12 level. This work aims to fill this gap by exploring the capability of large language models in ideating and designing culturally responsive projects for elementary and middle school programming classes. Our ultimate goal is to support K-8 teachers in effectively extracting suggestions from large language models by only using natural language modifications. Furthermore, we aim to develop a comprehensive assessment framework for culturally responsive AI-generated project ideas. We also hope to provide valuable insight into teachers’ perspectives on large language models and their integration into teaching practices."
  },
  {
    "title": "Embryonic object versus mature object: object-oriented style and pedagogical theme",
    "abstract": "Traditional approaches to object-oriented style emphasize classes with a basic set of constructors and a minimal set of methods that when combined permit the full potential of the instance objects to be realized. This object-oriented style is probably modeled on the style used in mathematics and logic to develop a system based on a minimal set of axioms and operations. The consequences of this style both in practice and in pedagogy are that objects enter into existence in an embryonic state and must be nurtured to maturity by a sequence of method calls that tweak behavior and/or add data. Although this minimalist approach is useful in the first stages of teaching objects and in exploratory design, we suggest that most designs should evolve towards building classes with a rich set of constructors and methods so that the instance objects may be born mature, that is, ready to use in the program without further tweaking. In particular, we believe that if students are taught to design in this manner, then they will be more effective both as students and as computing professionals.The ideas in this article have developed from our experience in designing the Java Power Tools (JPT) and in applying these tools to build many labs and demo programs. We found that using the traditional minimalist design approach hindered our ability to rapidly develop interesting applications. Gradually, we evolved both the tools and the examples to be far richer and have found that our development time has been dramatically reduced. We believe that those who teach objects may be interested in these principles even if they choose to work with entirely different tools and examples."
  },
  {
    "title": "Multi-institutional, multi-national studies in CSEd Research: some design considerations and trade-offs",
    "abstract": "One indication of the maturation of Computer Science Education as a research-based discipline is the recent emergence of several large-scale studies spanning multiple institutions. This paper examines a \"family\" of these multi-institutional, multi-national studies, detailing core elements and points of difference in both study design and the organization of the research team, and highlighting the costs and benefits associated with the different approaches."
  },
  {
    "title": "Multiple-Choice Questions in Programming Courses",
    "abstract": "Low performance of nontechnical engineering students in programming courses is a problem that remains unsolved. Over the years, many authors have tried to identify the multiple causes for that failure, but there is unanimity on the fact that motivation is a key factor for the acquisition of knowledge by students. To better understand motivation, a new evaluation strategy has been adopted in a second programming course of a nontechnical degree, consisting of 91 students. The goals of the study were to identify if those students felt more motivated to answer multiple-choice questions in comparison to development questions, and what type of question better allows for testing student knowledge acquisition. Possibilities around the motivational qualities of multiple-choice questions in programming courses will be discussed in light of the results. In conclusion, it seems clear that student performance varies according to the type of question. Our study points out that multiple-choice questions can be seen as a motivational factor for engineering students and it might also be a good way to test acquired programming concepts. Therefore, this type of question could be further explored in the evaluation points."
  },
  {
    "title": "OCTAL: online course tool for adaptive learning (abstract only)",
    "abstract": "The Online Course Tool for Adaptive Learning (OCTAL) is an adaptive exercise system that customizes the progression of question topics to each student. By creating a concept dependency graph of topics in a course and modeling a student's knowledge state, the tool will present questions that test knowledge within a student's zone of proximal development. We intend OCTAL to be a formative assessment tool that is not tied to any specific course by providing language-agnostic questions on computer science concepts. While the tool will be generalizable for many courses, our first prototype will include a concept map and question set from an introductory CS1 course, UC Berkeley's CS10: The Beauty and Joy of Computing. Using the tool, we are investigating metacognitive improvements in the identification of knowledge gaps by presenting online course material in a nonlinear fashion."
  },
  {
    "title": "Tutoring model for promoting teaching skills of computer science prospective teachers",
    "abstract": "One of the greatest challenges Computer Science (CS) teachers face is that of guiding their pupils through problem-solving processes, i.e., the process of constructing a solution for a given problem as an algorithm or a computer program. This paper suggests a tutoring model, to be implemented by prospective CS teachers, that aims at training them to accomplish this challenge. The model is based on one-on-one tutoring sessions, in which the prospective teacher meets a novice undergraduate student taking an introductory CS course and guides him or her through problem-solving processes. The tutoring activity provides the prospective CS teachers with an opportunity to experience teaching situations, especially learners' difficulties with respect to problem-solving processes, and consequently, to improve their teaching skills. The tutoring model was integrated into the Methods of Teaching Computer Science course and was accompanied by a qualitative research. The main research findings indicate that the prospective CS teachers: (a) change their perspective with respect to teaching processes; (b) focus in their teaching on learners' difficulties; (c) increase their awareness to problem-solving processes and to the need to adapt different teaching approaches for different learners; (d) become reflective practitioners; and (e) increase their confidence with respect to teaching processes."
  },
  {
    "title": "TuneScope: Engaging Novices to Computational Thinking through Music",
    "abstract": "To accelerate the adoption of computational thinking (CT), we have developed TuneScope, an online platform for introducing novices to programming in the context of music. TuneScope combines a sound analysis & synthesis tool with Snap!, a computing language developed at the University of California, Berkeley. This demo explores CT concepts such as decomposition, patterns, abstraction, and algorithms in TuneScope while also exploring the creation of four cascading musical components from (1) sequences of notes, (2) musical chords, (3) sampled sounds, and (4) synthesized sounds. The challenge is to design activities that include authentic music learning as well as genuine computational thinking. In this demo, we show concepts around sequence (the order in which musical notes appear in time; and the order of statements in a computer program) and repetition (includes repeats as well as the structure of melodies; and computing loops and recursion). The instructional activities in this demo have been piloted three times in an associated course at the University of Virginia. Data collected from the course suggest a positive effect on both the understanding of CT concepts and the comprehension of music. More detail on TuneScope can be found at https://maketolearn.org/tunescope/."
  },
  {
    "title": "Embedding computer science concepts in K-12 science curricula",
    "abstract": "To engage a broader audience in computer science, we have developed a set of curriculum units embedded with computer science concepts for K-12 science education. We chose bioinformatics as a vehicle to deliver these units. Our curriculum development cycle began with the identification of a set of computer science concepts which are potentially relevant to life sciences. Problems in life sciences as well as bioinformatics tools to be used for solving these problems were carefully examined for the delivery of identified computer concepts. They were later presented to groups of regional K-12 science teachers in our summer workshop on bioinformatics. With their help, we adapted and polished these curriculum units to meet Minnesota state standards for K-12 science education. This paper describes our approach in developing the curriculum units."
  },
  {
    "title": "Virtual seminars—real networked results? (poster)",
    "abstract": "Networks have become increasingly important in the CS curriculum in recent years. Students need to learn not only technical issues in distributed systems but also how to communicate and to work in groups. We describe an experiment in the use of email discussion to support first year learning in an Information Systems module. The educational aims were four-fold: to give students an insight into the applications of communications technology, to link better their practical experience to theoretical knowledge of the topic, to introduce further student-driven learning into the first year, and to enhance students’ communication and team working skills"
  },
  {
    "title": "An intelligent tutor to learn the evaluation of microcontroller I/O programming expressions",
    "abstract": "Embedded systems engineers need to learn how I/O programming expressions for microcontrollers evaluate. We designed, implemented, and tested an intelligent tutoring system prototype for learning such evaluations. The Microcontroller Knowledge (MicK) tutor guides a student step-by-step towards a solution. A domain reasoner, built using the Ideas framework, generates feedback and hint messages. MicK supports various microcontrollers and programming languages by dynamically creating exercises and using lookup environments. Instructors can easily customise MicK, for instance by adding new exercises and changing the reported feedback messages. MicK is validated in a pilot study with questionnaires filled in by students and lecturers. The results show that the step-by-step feedback and hint messages contribute to understanding how microcontroller I/O programming expressions evaluate."
  },
  {
    "title": "A statewide survey on computing education pathways and influences: factors in broadening participation in computing",
    "abstract": "In computing education, we have only just started developing methods for accurately measuring a student's understanding of introductory computing, let alone characterizing a whole classroom, school, or university system. As part of evaluating the impact of \"Georgia Computes!\" we sought an understanding the factors influencing undergraduate enrollment in introductory computing for an entire state in the United States of America. We gathered surveys from over 1400 undergraduate students in introductory computing classes from 19 higher-education institutions in a single state. The analysis provided insight into the impact of \"Georgia Computes!\", into the connections between stages of the computing education pathways, and how factors that influence students' pursuit of computing differ between genders and majority/minority group students."
  },
  {
    "title": "Should Your College Computer Science Program Partner with a Coding Boot Camp? (Abstract Only)",
    "abstract": "The rise of so-called \"coding boot camps\" as an alternative training ground for software development is prominent in the popular press, and these camps have caught the attention of colleges and universities. Administrators and faculty considering whether and how to partner with coding boot camps may want to consider what skills and knowledge boot camps are providing to students as well as successful college/boot camp partnerships. This poster reports on data from a collaborative NSF EHR grant (#1561705/ #1561717) funding a qualitative study of how coding boot camps and university CS programs prepare students for careers as software developers. As part of early data collection for this study, we have learned not only details of boot camp student preparation for the workforce, but also ways that universities are currently partnering with boot camps. This poster will report on data gathered in focus groups and interviews with curriculum developers from both coding boot camps and university CS programs categorized into the themes of: classifications of boot camps, screening/admission criteria, student profiles, training (both independently and in partnership with colleges/universities), and job placement. We draw suggestions from this initial data as to where boot camps may be able to enhance traditional CS degrees for students and what CS educators may want to consider when evaluating the boot camp experience."
  },
  {
    "title": "Understanding Computer Science Teacher Capacity",
    "abstract": "Every student deserves to have a highly qualified teacher. Increasing certified Computer Science (CS) teacher capacity is essential for our region to provide enough CS teachers to sustain the current rate of CS growth. My dissertation focuses on synthesizing a high-level overview of reporting on secondary school teacher certification and student enrollment data from the academic years of 2016 through 2021."
  },
  {
    "title": "Learning O-O concepts in CS I using game projects",
    "abstract": "Teaching object-oriented design and programming in CS1 can benefit from problems that stimulate student interest, that yield to natural analysis under an object-oriented approach, and that provide a basis for extension and reuse. Our project endeavors to design, develop, and implement a set of games that spawn such problems spanning nearly the entirety of concepts presented in our CS1 course."
  },
  {
    "title": "Intelligent agent for knowledge tree administration",
    "abstract": "Knowledge tree is a list of pointers to applicable documents WWW pages or other information resources together with the tools that are needed for interactive construction of trees by users. It is in fact virtual multimedia textbook and as such represents appreciated high quality supplement to the existing learning materials. One of the important characteristics of virtual textbooks is. their ability to change dynamically and to comprise new learning materials as soon as they appear in the Web or anywhere in the cyberspace. For these reason, knowledge trees need to be maintained regularly to avoid unpleasant surprises. We upgraded knowledge trees with an intelligent agent that can automatically verify the validity of links; when changes are detected in the document or referenced document is not found after several attempts, the link is marked and administrator can take appropriate measures. But the agent can take even more active role in the tree maintenance process: it can be upgraded to look for new materials to be added to knowledge trees. Documents gathered in knowledge trees, or more precisely links in the documents, represent starting point for our agent when we activate it to extend the existing knowledge tree. The agent checks whether the documents pointed to by these links tit into knowledge tree. There are some parameters to be set before its exploration starts. One of the most important parameters is depth of searching. Agent can follow certain link and recursively links from the document, pointed to by the original link. The value of this parameter have to be selected carefully as the number of links can grow exponentially. Other parameters that can be set for the agent are specifications about the types of links not to be followed during a search for new materials, specifications of links that should always be followed and intermediate cases where decisions are taken according to some specific settings."
  },
  {
    "title": "Distributed visualization of graph algorithms",
    "abstract": "DisViz is a visualization tool designed to assist students in learning graph algorithms, an important topic in the undergraduate curriculum. DisViz is intended for collaborative use by a group of students over a classroom network. This visualization system views network hosts as graph nodes and the socket connections among them, as graph edges. In typical usage, every student runs a copy of DisViz on his/her local machine. These applications detect each other's presence on the network and coordinate their actions to execute the graph algorithm in question and to deliver identical animations to every terminal."
  },
  {
    "title": "Finite automata models for CS problem with binary semaphore",
    "abstract": "A non-deterministic finite automata (NFA) application to a critical section (CS) problem modeling is investigated. A traditional approach to an analysis and design includes the C- like pseudo codes. This is also an educational method popular in the vast majority of texts. However, a finite automata approach offers simplicity and visualization of synchronization mechanisms."
  },
  {
    "title": "Further Evaluations of Industry-Inspired Pair Programming Communication Guidelines with Undergraduate Students",
    "abstract": "Pair programming has several benefits when it is successfully used by students and experts alike. However, research shows that novice pairs find the necessary pair communication to be one of the main challenges in adopting this process. A set of industry-inspired pair programming guidelines have been derived and evaluated from qualitative examinations of expert pairs, with the aim of helping novice programmers communicate within their pair. This research describes a further evaluation of these guidelines with a number of student pairs, and demonstrates how novice pairs who were exposed to the guidelines became comfortable communicating with their partners."
  },
  {
    "title": "A Comparison of Peer Instruction and Collaborative Problem Solving in a Computer Architecture Course",
    "abstract": "While substantial research has demonstrated that active learning pedagogies are better for learning than passive lectures, we need to understand the trade-offs between different active learning pedagogies. Computer Architecture at Midwestern University has historically been taught using active lectures, introducing content with a few clicker questions. In Fall 2018 (N = 363), short video lectures were made available to students as a supplemental resource. In Spring 2019, the instructor flipped the course, requiring students to watch the video lectures and complete an assignment before attending class. Two versions of the course were taught concurrently, using the same homework assignments, machine problems, and examinations but with different in-class pedagogies. Version SP19PI (N = 179) was taught using peer instruction. Version SP19CP (N = 73) was taught using collaborative problem solving, organizing students into teams of 3 to work on problems. Students completed surveys that measured their perceptions of time spent on the course, course difficulty, perceptions of stress, and sense of belonging. We compare students' performance on midterm exams and their non-cognitive outcomes to examine the relative effects of these different active learning pedagogies. We find that both flipped offerings (peer instruction and collaborative problem solving) benefited students beyond active lectures. Peer instruction (SP19PI) made learning more efficient. Collaborative instruction (SP19CP) provided greater social support for learning and eliminated gender grade disparities."
  },
  {
    "title": "Improving discrete mathematics and algorithms curricula with LINK",
    "abstract": "This paper introduces the LINK system as an educational tool which can be used to visualize and experiment with discrete algorithms. An extended example demonstrates the flexibility of the system in the context of a fundamental graph algorithm: finding the strongly connected components of a directed graph."
  },
  {
    "title": "Using UML class diagrams for a comparative analysis of relational, object-oriented, and object-relational database mappings",
    "abstract": "This paper illustrates the manner in which UML can be used to study mappings to different types of database systems. After introducing UML through a comparison to the EER model, UML diagrams are used to teach different approaches for mapping conceptual designs to the relational model. As we cover object-oriented and object-relational database systems, different features of UML are used over the same enterprise example to help students understand mapping alternatives for each model. Students are required to compare and contrast the mappings in each model as part of the learning process. For object-oriented and object-relational database systems, we address mappings to the ODMG and SQL99 standards in addition to specific commercial implementations."
  },
  {
    "title": "TextMOLE: text mining operations library and environment",
    "abstract": "The paper describes the first version of the TextMOLE (Text Mining Operations Library and Environment) system for textual data mining. Currently TextMOLE acts as an advanced indexing and search engine: it parses a data set, extracts relevant terms, and allows the user to run queries against the data. The system design is open-ended, robust, and flexible. The tool is designed to quickly analyze a corpus of documents and determine which parameters will provide maximal retrieval performance. Thus an instructor can use the tool to demonstrate information retrieval concepts in the classroom, or use the tool to encourage hands-on exploration of concepts often covered in an introductory course in information retrieval or artificial intelligence. Reseachers will find the tool useful when a `quick and dirty' analysis of an unfamiliar collection is required."
  },
  {
    "title": "Ideas for projects in undergraduate information assurance and security courses",
    "abstract": "In this work, we present some ideas for projects that can be used in undergraduate Information Assurance and Security (IAS) courses. The projects range from cryptanalysis of ciphertext, network security, security vulnerability analysis, and programming to demonstrate buffer overflow. The projects can be used in IAS courses such as cryptography, network security, and computer security. Alternatively, they can be used as separate modules in computer science courses such as operating systems, networking, and programming. Some of these projects have been piloted by the author and have achieved their objectives."
  },
  {
    "title": "Virtualized games for teaching about distributed systems",
    "abstract": "Complex distributed systems are increasingly important in modern computer science, yet many undergraduate curricula do not give students the opportunity to develop the skill sets necessary to grapple with the complexity of such systems. We have developed and integrated into an undergraduate elective course on parallel and distributed computing a teaching tool that may help students develop these skill sets. The tool uses virtualization to ease the burden of resourcing and configuring complex systems for student study, and creates varied \"firefighting\" gaming scenarios in which students compete to keep the system up and running in the presence of multiple issues. Preliminary experience indicates that (1) students find the tool engaging and (2) it is a manageable way in which to give students a novel perspective on interaction with complex distributed systems."
  },
  {
    "title": "XDP: a simple library for teaching a distributed programming module",
    "abstract": "XDP is a simplified interface to the DP distributed programming library. I describe its use in a course on workstation programming, a pragmatic course whose mission is to cover concurrent programming, graphical user interfaces and event driven programming as well as network and distributed computing. Using XDP, rather than the native socket interface, makes it feasible to cover the last topics, squeezed though they are into a rather overloaded course. Finding (or building) teaching tools like XDP will become increasingly essential as more demands are placed on undergraduate CS curriculum coverage."
  },
  {
    "title": "Object imperatives!",
    "abstract": "The phrase 'paradigm shift' has largely been used to describe a dichotomy between imperative and object oriented styles of development [2]. However the changes in the nature of software products, and hence of the processes used to produce them, have been much more extensive. This richer view of the nature of computing is inherent within the experiences of students entering higher education and is at variance with the implicit model enshrined within academic computing curricula. A direct implication of this is that radical changes may be needed in computing curricula; but there are many principled and pragmatic objections."
  },
  {
    "title": "An Open-Source, API-Based Framework for Assessing the Correctness of Code in CS50",
    "abstract": "We present check50, an open-source, extensible tool for assessing the correctness of students' code that provides a simple, functional framework for writing checks as well as an easy-to-use API that abstracts away common tasks, among them compiling and running programs, providing their inputs, and checking their outputs. As a result, check50 has allowed us to provide students with immediate feedback on their progress as they complete an assignment while also facilitating automatic and consistent grading, allowing teaching staff to spend more time giving tailored, qualitative feedback. We have found, though, that since introducing check50 in 2012 in CS50 at Harvard, students have begun to perceive the course's programming assignments as more time-consuming and difficult than in years past. We speculate that the feedback that check50 provides prior to students' submission of each assignment has compelled students to spend more time debugging than they had in the past. At the same time, students' correctness scores are now higher than ever."
  },
  {
    "title": "Collaborative learning: a case study for CS1 at Grinnell College and Austin",
    "abstract": "Since Fall, 1992, the author has used techniques of collaborative learning in his sections of CS1 at both Grinnell College and The University of Texas at Austin. These experiments have been successful by various measures: drop rates are very low, students perform well on tests, student motivation and enthusiasm are very high, and the class covers about 20% more material during the semester. This paper describes the approach that has evolved through several iterations of this course."
  },
  {
    "title": "A Social Threat Modeling Framework to Structure Teaching about Responsible Computing",
    "abstract": "Myriad projects and efforts are underway to infuse more content on ethical and socially-responsible computing into Computer Science curricula. Talks and papers on these projects largely focus on case studies and examples that can be included in assignments. This paper instead takes a pedagogic perspective. Drawing on papers on ethics-based design from multiple computing disciplines, as well as frameworks for identifying security threats, we designed a framework for identifying a variety of social threats in the kinds of programs that university students develop in their first two years of study. The framework is unique in centering around architectural components of applications, rather than stakeholders and values."
  },
  {
    "title": "How seamless are technology-rich learning environments? the voice of IT educators",
    "abstract": "Educational environments in higher education Information Technology (IT) courses typically involve the use of multiple technologies. Such technology-rich learning and teaching environments (TRLTEs) can enhance a student’s learning experiences and support learning in different settings (e.g., in-class and out-of-class, individual and group learning) and promote flexibility in learning in terms of time, space and access to learning resources. However, these can be complex teaching environments for educators to manage. A challenge for educators is to ensure that learning across multiple technologies and contexts happens seamlessly. Seamless learning is a notion whereby students transition smoothly from one learning setting to another, typically aided by technology. This paper reports the findings of an exploratory qualitative study of IT educators’ experiences of a TRLTE. Semi-structured interviews were used to elicit IT educators’ views of enablers and barriers to learning seamlessly. Data were analyzed using a thematic analysis technique. The findings revealed several issues in facilitating learning in a TRLTE and IT educators used various technologies to bridge the seams in their students’ learning. We discuss the findings and the implications for providing a seamless learning experience."
  },
  {
    "title": "A New Look at Novice Programmer Errors",
    "abstract": "The types of programming errors that novice programmers make and struggle to resolve have long been of interest to researchers. Various past studies have analyzed the frequency of compiler diagnostic messages. This information, however, does not have a direct correlation to the types of errors students make, due to the inaccuracy and imprecision of diagnostic messages. Furthermore, few attempts have been made to determine the severity of different kinds of errors in terms other than frequency of occurrence. Previously, we developed a method for meaningful categorization of errors, and produced a frequency distribution of these error categories; in this article, we extend the previous method to also make a determination of error difficulty, in order to give a better measurement of the overall severity of different kinds of errors. An error category hierarchy was developed and validated, and errors in snapshots of students source code were categorized accordingly. The result is a frequency table of logical error categories rather than diagnostic messages. Resolution time for each of the analyzed errors was calculated, and the average resolution time for each category of error was determined; this defines an error difficulty score. The combination of frequency and difficulty allow us to identify the types of error that are most problematic for novice programmers. The results show that ranking errors by severity—a product of frequency and difficulty—yields a significantly different ordering than ranking them by frequency alone, indicating that error frequency by itself may not be a suitable indicator for which errors are actually the most problematic for students."
  },
  {
    "title": "The challenge of teaching students the value of programming best practices",
    "abstract": "We investigate the benefits of our programming assignments in correlation to what the students learn and show in their programming solutions. The assignments are supposed to teach the students to use best practices related to program comprehension, but do the programming assignments clearly show the benefits of best practices? We performed an experiment that showed no significant result which suggests that the assignments did not emphasise the value of best practices. As lecturers, we understand that constructing assignments that match the sought after outcome in students learning is a complex task. The experiment provided valuable insights that we will use to improve the assignments to better mirror best practices."
  },
  {
    "title": "Choosing a Didactic Basis for an Instructional Video: What Are the Implications For Novice Programmers?",
    "abstract": "Much work on instructional videos in computing education focuses on the overall impact and technical aspects of videos, such as motivation and length. However, it might be significant how the underlying pedagogical theory, the didactic basis, determines the delivery of the content. We conducted a randomized experiment to investigate the research question: How does the didactic basis of an instructional video affect code writing performance and self-efficacy given the basic skill of novice programmers? Our data included two cohorts of 133 and 428 CS1 students from the Fall semesters of 2021/22 and 2022/23, respectively. In cohort 1, videos based on language-sensitive teaching led to significantly better results in writing code in object orientation for novices with medium basic skills than videos based on worked examples. This result could not be replicated in cohort 2. We found no effect on novice self-efficacy in either cohort."
  },
  {
    "title": "Highly interactive online study skills course: \"unstuck\"",
    "abstract": "This poster describes the most important aspects concerning design and development of an highly interactive web based study skills course called \"Unstuck\" which is a work in progress to be finished June 2008.\"Unstuck\" is a project started by both teachers and students from Gjøvik University College and Telemark University College in Norway. This project started in 2006 as a result of experience from more than 10 years of teaching students with insufficient study skills. In this course we aim to present the theory and practice of \"How to study\" in an exiting interactive multimedia environment. Telemark University College has since 2002 educated students starting with only a certificate of completed apprenticeship. In 2007, approximately 70% of all the students studying electrical engineering have this type of background, and insufficient study skills are a challenge. \"Unstuck\" will be used by students in secondary High school and University Colleges in Telemark, and Gjøvik in Norway from August 2008. What makes Unstuck different from other study skills courses? The content of Unstuck is similar to other courses; the difference is the way the content is presented for the students. Unstuck will contain intensive use of interaction with the student, which involves various active actions such as pressing buttons, placing objects to specific locations on the screen, marking key words etc. Videos are used to demonstrate how to study in practice and to illustrate class room and other study related situations. At the end of the course the student will have a short test (quiz). If the student don't pass, it is possible to immediately repeat relevant sections, and subsequently repeat the test. \"Unstuck\" will be an easy to use interactive multimedia study skills course on the weB."
  },
  {
    "title": "Encapsualtion and reuse as viewed by java students",
    "abstract": "Through audio-taped student interviews, this study examined beginning Java students' conceptions of object-oriented programming. Students rated programs on stylistic criteria including ease of comprehension, ease of debugging, ease of modification, ease of reuse, and overall quality of design. They also explained the reasons for their ratings. The results will be discussed and interpreted in light of previous research. Implications for instruction will also be examined."
  },
  {
    "title": "Engaging with Identity, Inclusion, & Intersectionality: Videos that Spark Conversations",
    "abstract": "This session will help educators, staff, and administrators gain understanding and confidence in using inclusive language to refer to identities and demographic groups. Using human-centered terminology for identities based on characteristics like race, gender, disability status, etc. improves inclusivity for historically minoritized students and colleagues in computing. This session provides tools to learn current best practices and also to navigate the changing landscape of respectful language that supports diversity, equity, and inclusion (DEI). Framed by an NCWIT resource---Videos that Spark Conversations---and led by a panel of expert practitioners in the CS Ed community, attendees will watch and discuss three, short videos on topics including norms for discussing identities, disability, and ethnicity. In this session, participants will (1) engage in expert-guided small group discussions; (2) learn inclusive terminology and the reasons why specific terms are used for 3 types of identities; and (3) learn how to use the Videos that Spark Conversations resource to continue learning and share knowledge with others."
  },
  {
    "title": "Methods and tools for exploring novice compilation behaviour",
    "abstract": "Our research explores what we call compilation behaviour: the programming behaviour a student engages in while repeatedly editing and compiling their programs. This edit-compile cycle often represents students' attempts to make their programs syntactically, as opposed to semantically, correct. Over the course of two years, we have observed first-year university students learning to program in Java, collecting and studying thousands of snapshots of their programs from one compilation to the next. At the University of Kent, students are introduced to programming in an objects-first style using BlueJ, an environment intended for use by novice programmers."
  },
  {
    "title": "Multidisciplinary Minor in Forensics in a Small Liberal Arts University",
    "abstract": "Cyber security is an issue that has become important very quickly and that touches many different disciplines. Yet, many college students in non- technical fields lack the fundamentals of network security, cybercrime, and digital forensics concepts. There are many institutions that offer undergraduate and graduate programs in Forensics and Computer Security and there are many institutions that offer interdisciplinary minors in Forensics Studies. We have developed a multidisciplinary minor in Forensics that brings together the fields of Biology, Chemistry, Criminal Justice and Computer Science. This minor can be completed as a complement to a science or criminal justice degree or as a stand-alone minor. The minor introduces students to the multifaceted nature of criminal investigations. Students will gain knowledge in several disciplines that contribute to the forensic sciences."
  },
  {
    "title": "The dimensions of variation in the teaching of data structures",
    "abstract": "The current debate about the teaching of data structures is hampered because, as a community, we usually debate specifics about data structure implementations and libraries, when the real level of disagreement remains implicit -- the intent behind our teaching. This paper presents a phenomenographic study of the intent of CS educators for teaching data structures in CS2. Based on interviews with Computer Science educators and analysis of CS literature, we identified five categories of intent: developing transferable thinking, improving students' programming skills, knowing \"what's under the hood\", knowledge of software libraries, and component thinking. The CS community needs to first debate at the level of these categories before moving to more specific issues. This study also serves as an example of how phenomenographic analysis can be used to inform debate on syllabus design in general."
  },
  {
    "title": "Objects Count so Count Objects!",
    "abstract": "One means to determine whether a student understands the fundamentals of good object-oriented design is to assess designs the student has created. However, providing reliable assessment of designs efficiently is difficult due to the many viable designs that are possible and the high level of expertise required. Consequently, design assessment tends to be limited to identifying the most basic of design problems. We propose a technique---\"object counts''---that involves counting the objects created at runtime. This is more efficient than manual grading because the data is gathered automatically and more reliable than using rubrics because it is based on objective data. The data is relevant because it captures the fundamental property of an object-oriented program---the creation of objects---and so provides good insight into the student's design decisions. This provides support for both summative and formative feedback. We demonstrate the technique on two corpora containing submissions for a typical first assignment of an introductory course on object-oriented design."
  },
  {
    "title": "Teaching practical software engineering and global software engineering: evaluation and comparison",
    "abstract": "Changes and globalization of software (SW) development urgently require new ways of teaching and training students in practical and global SW engineering (SE). In this paper we present the innovative methods and experiences from several years of teaching practical and global SW engineering at the Computer Science Departments of San Francisco State University (SFSU), USA in conjunction with the University of Applied Sciences, Fulda University, Germany. We also provide analysis and evaluation of class effectiveness based on several assessment methods including extensive student questionnaires, with our recommendations for teaching such SE classes. Our approach was to combine and synchronize class teaching about SW engineering methods and processes with actual SW development work in a setting designed to simulate a small SW company. Students were divided in \"local\" groups of 4-6 members, each group forming small SW \"companies\" in charge of developing a complete working WWW application as a final class project. Several smaller groups of students at SFSU were paired with groups of students at Fulda University, whom they never met face to face, to form \"global\" groups, thus simulating global SW engineering in a realistic setting. Students developed their final project incorporating five well-defined milestones typical for full SW development lifecycle. Instructors spent considerable time supervising and interacting with student \"companies\" in the role of company customers, CTO and VPs of engineering, marketing and sales. All student groups (including global ones) were able to produce impressive final project applications and provided very positive feedback for this class."
  },
  {
    "title": "Student attitudes toward computers",
    "abstract": "At Penn State certain major areas within Business Administration require a computer programming course in the curriculum. The course usually taken is Computer Science 403, a FORTRAN programming course especially designed for business students. In recent years student complaints about CS 403 have been heard. Similarly, computer science faculty have had complaints about the students. There has been a problem. Research was begun to determine some of the dimensions of the problem. This investigation explored the attitudes of the students toward computers. By measuring attitudes it was expected that some explanation of the student unrest would materialize. Other possible contributing courses such as the FORTRAN language (rather than COBOL) and the level of student ability have been or will be separately studied.\n Some of the possible causes for the problem which were considered at the beginning of the investigation were:\n This was just one evidence of a general public distaste with computer technology.\n The course had a bad reputation which was communicated to students before they enrolled in CS 403.\n The course itself created negative attitudes.\n The instructor created negative attitudes.\n An information systems course created more positive attitudes."
  },
  {
    "title": "Jeroo: a tool for introducing object-oriented programming",
    "abstract": "Jeroo is a tool that has been developed to help students in beginning programming courses learn the semantics of fundamental control structures, learn the basic notions of using objects to solve problems, and learn to write methods that support a functional decomposition of the task. Jeroo is similar to Karel the Robot and its descendants, but has a narrower scope than Karel's descendants and has a syntax that provides a smoother transition to either Java or C++. Jeroo has been class tested at Northwest Missouri State University, and has proven to be an effective tool for working with students in a beginning programming class. Jeroo and user documentation are available at http://www.nwmissouri.edu/~sanders/Jeroo/Jeroo.html."
  },
  {
    "title": "Continuing education activities of the ACM",
    "abstract": "Continuing education is a major concern for most professional societies. This is especially true for ones like ACM, whose members are working at the leading edge of technology - both in research and within numerous application areas. ACM, through its Education Board, sponsors several different activities to assist members in their quest to keep abreast of the latest technical developments. This panel has several purposes. On the one hand it will serve as a means for disseminating more widely information on our current projects. In addition it will allow us to receive feedback from the membership with respect to how they perceive theses activities, what changes they might like to see, and what new projects we should be considering. Among the topics that will be discussed are Self Assessment Procedures, Professional Development Seminars, Tutorial Weeks, and accreditation efforts, and Institute for Certification of Computer Professionals (ICCP) activities. After these activities are briefly described, the remainder of the session will be devoted to answering questions and soliciting ideas from the audience."
  },
  {
    "title": "CS50 sandbox: secure execution of untrusted code",
    "abstract": "We introduce CS50 Sandbox, an environment for secure execution of untrusted code. Implemented as an asynchronous HTTP server, CS50 Sandbox offers clients the ability to execute programs (both interactive and non-interactive) written in any compiled or interpreted language in a tightly controlled, resource-constrained environment. CS50 Sandbox's HTTP-based API takes files, command lines, and standard input as inputs and returns standard output and error plus exit codes as outputs. Atop CS50 Sandbox, we have built CS50 Run, a web-based code editor that enables students to write code in a browser in any language, whether compiled or interpreted, that's executed server-side within a sandboxed environment. And we have built CS50 Check, an autograding framework that supports black- and white-box testing of students' code, leveraging CS50 Sandbox to run series of checks against students' programs, no matter the language of implementation.\n We present in this work the pedagogical motivations for each of these tools, along with the underlying designs thereof. Each is available as open source."
  },
  {
    "title": "Seeing Myself through Someone Else's Eyes",
    "abstract": "This article describes the impact of in-classroom coaching for computer science (CS) educators. Coaching is a way to support teachers in their classroom while teachers master new curricula or educational approaches and is not evaluative in purpose. Using qualitative methods to analyze computer science classroom observations, teacher surveys, teacher interviews, coaching logs, and coach interviews, this research answers the following question: How does in-classroom coaching support inquiry and equity-based teaching practices? This study of Exploring Computer Science classrooms illustrates the importance of having in-classroom coaches who can collaborate and reflect with teachers about current practices and who can help support new inquiry and equity-based instructional skills. Teachers note that in-classroom coaching helped (1) positively impact changes in pedagogy, (2) enrich teachers’ CS content knowledge, and (3) break CS teacher isolation at schools. Three case studies from computer science classrooms served by different coaches are shared to illustrate the ways teacher instructional practice can be strengthened over time through coaching."
  },
  {
    "title": "The Programming Exercise Markup Language: Towards Reducing the Effort Needed to Use Automated Grading Tools",
    "abstract": "Automated programming assignment grading tools have become integral to CS courses at introductory as well as advanced levels. However such tools have their own custom approaches to setting up assignments and describing how solutions should be tested, requiring instructors to make a significant learning investment to begin using a new tool. In addition, differences between tools mean that initial investment must be repeated when switching tools or adding a new one. Worse still, tool-specific strategies further reduce the ability of educators to share and reuse their assignments. This paper describes an early experiences with PEML, the Programming Exercise Markup Language, which provides an easy to use, instructor friendly approach for writing programming assignments. Unlike tool-oriented data interchange formats, PEML is designed to provide a human friendly authoring format that has been developed to be intuitive, expressive and not be a technological or notational barrier to instructors. We describe the design and implementation of PEML, both as a programming library and also a public-access web microservice that provides full parsing and rendering capabilities for easy integration into any tools or scripting libraries. We also describe experiences using PEML to describe a full range of programming assignments, laboratory exercises, and small coding questions of varying complexity in demonstrating the practicality of the notation. The aim is to develop PEML as a community resource to reduce the barriers to entry for automated assignment tools while widening the scope of programming assignment sharing and reuse across courses and institutions."
  },
  {
    "title": "Concepts for mobile programming",
    "abstract": "Computer Science departments are beginning to recognize the importance of offering courses in mobile application development. This paper discusses underlying concepts that should be addressed in these courses. These concepts are grouped into six categories: User interface, Device cooperation, Hardware issues, Data handling, Application interaction, and Programming issues."
  },
  {
    "title": "Impact on Women Undergraduate CS Students' Experiences from a Mentoring Program",
    "abstract": "Despite the demand for Computer Science (CS) related jobs that women in computing can join, there has been a decline in the number of women earning a bachelor's degree in the United States from 27% in 1997 to 19% in 2016. To reduce this gap, promote gender diversity in computing and retain students, a mentorship program was created within a computing program in a university with high research activity in the southeastern US. In this program, women undergraduate CS students are paired with corporate mentors for career guidance and support. This study focuses on understanding students' experiences, including transfer students, when participating in this mentorship program. The women transfer students' perspectives are especially critical as there are a limited number of studies highlighting their experiences, which may vary from traditional women students. In spring 2020, we implemented an IRB-approved phenomenology study. We conducted semi-structured interviews with five women undergraduate CS students, among which four were transfer students. The inductive analysis of the data shows that the mentorship program impacted students' personal as well as professional spaces. Within each of these spaces, students are impacted by the program, their mentors, and their peers in the program. The program impacts are presented here."
  },
  {
    "title": "Social Media, Ethics, and Automation: Introducing a Free Interactive Online Textbook",
    "abstract": "Computer Science educators have made recent efforts to incorporate ethics into their introductory programming classes, as well as offer new programming classes that intersect with other fields (CS+X or X+CS) to attract new and diverse groups of students. We contribute to these efforts with a free interactive online textbook which teaches intro programming in an interdisciplinary way: Social Media, Ethics, and Automation (https://social-media-ethics-automation.github.io/book/). The interdisciplinary content of our textbook is primarily organized around social media topics, with interactive programming learning and activities (e.g., modifying bots) used to explore those social media topics. This follows an X+CS integration since CS is used to support the other topic (social media), rather than vice-versa (traditional CS+X). Ethics are incorporated throughout, starting with a diverse set of ethical frameworks, and including ethical reflections with each activity. In this demo, we will explain our pedagogical goals and strategies and then show the features and interactivity of this online textbook."
  },
  {
    "title": "Teaching track faculty in CS (abstract only)",
    "abstract": "Many computer science departments have chosen to hire faculty to teach in a teaching-track position that parallels the standard tenure-track position. These teaching-track positions include the possibility for promotion, longer-term contracts and greater pay as demonstrated by excellence in teaching, educational material development, and service. Since this type of position is relatively new in CS departments, the expectations and responsibilities for such faculty varies from one university to another, but they certainly differ from the traditional tenure-track positions. This birds-of-a-feather is designed to gather educators who are currently in such a position to share their experiences as members of the faculty of their departments and schools, and to provide opportunities for schools considering such positions to gather information. In past sessions, we have laid the groundwork for keeping this community together through online discussions and consolidating information about teaching-track positions at various universities together into an online database."
  },
  {
    "title": "From difference to diversity: including women in the changing face of computing",
    "abstract": "In this paper we argue that gender difference thinking, with regards to attitudes towards computing, can work against diversity in the field of computing. Indeed, gender difference approaches to the participation of women in computing have not provided adequate explanations for women's declining interest in computer science (CS) and related technical fields. As yet \"The Changing Face of Computing\" has not led to significant changes in the levels of women's participation. Indeed, the number of computer science degrees awarded to women has steadily declined since 1984. Our objective in this paper is to present a critique on why gender difference approaches may be problematic and propose that a cultural approach offers a more effective framework for investigating and increasing women's participation in CS. We support our findings and recommendations from the most recent research in a series of studies carried out at Carnegie Mellon University (CMU) over the past 10 years. In brief, we found the Women-CS fit at CMU continues to present a positive and encouraging story. Our findings demonstrate that under certain conditions women, alongside their male peers, can fit successfully into a CS environment and help shape that environment and computing culture, for the benefit of everyone, without accommodating presumed gender differences or any compromises to academic integrity."
  },
  {
    "title": "One Size Doesn't Fit All: Diversifying Data Science Course Projects by Student Background and Interests",
    "abstract": "A key challenge to a data science program is how to tailor its curriculum to accommodate the needs and interests of students from diverse academic backgrounds. To address this challenge, we propose Proj4X, a general project model that gives students the flexibility in choosing subject areas for the projects based on their background and interests, while requiring every project to address the key knowledge and skills covered in the course. Although project-based learning has been well researched, only a few studies have addressed the challenges in managing student-initiated projects. We have applied Proj4X to a graduate database course in our data science program. We used student peer evaluation to measure the performance of projects objectively and study the effect of group size on the performance of projects and the correlation between specific aspects of a project and its overall rating. Student feedback shows that Proj4X can greatly foster the collaboration among students of diverse backgrounds and inspire them to work on a wide range of interesting topics: from satellite tracker, hospital search during pandemic, to wildlife diversity monitoring."
  },
  {
    "title": "Curious about Student Participation in Humanitarian Open Source Software?",
    "abstract": "This special session is intended for people who are curious about integrating Humanitarian Free and Open Source Software (HFOSS) into their courses and involving students in HFOSS projects. HFOSS participation provides an excellent vehicle to introduce students to computing for social good while also giving them experience with real-world software development. The session will begin with a series of lightning talks by faculty who have incorporated HFOSS participation into one or more of their courses. This will be followed by a small group activity to allow attendees to ask questions and discuss individual interests in integrating HFOSS activities and to become familiar with HFOSS educational resources available for instructors. The session will conclude with some closing comments on current and planned activities of instructors who are teaching with HFOSS and suggestions for faculty who would like to pursue this teaching approach themselves."
  },
  {
    "title": "Trace to Follow, Run to Explore: A Demonstration using Interactive Sorting",
    "abstract": "The fixed control structure of deterministic algorithms renders their behavior traceable but not amenable to interactive exploration. In the accompanying poster, we illustrate how the runs of a transition system simulating a family of algorithms form the basis for interaction and exploration. A student interacting with a transition system controls its execution. They are running a system, not merely tracing an algorithm. The runs are easy and fun to construct as pen-and-paper based classroom activities or as interactive online simulations. We illustrate the versatility of this approach for a class of swap-based sorting algorithms and other related problems."
  },
  {
    "title": "Student scrums (abstract only)",
    "abstract": "Over the past ten years Agile software development practices have grown in acceptance and have gained a solid foothold in commercial software development. Our students are entering the workforce with an increasing percentage of companies that are using Agile processes and practices in the development of their products and services. The most widely used Agile project management framework is Scrum. Scrum has a well defined approach for organizing and controlling a software development project. It is almost always implemented in combination with Agile software development practices, but is flexible enough to even be used for managing non-software projects. Selecting Scrum as the framework for student team projects has the advantage of introducing software process at a level of ceremony that both captures foundational software engineering practices and is manageable within the constraints of a class or capstone project. This workshop will introduce participants to the components of the Scrum framework with activities designed to demonstrate the flexibility of Scrum to support a diverse set of course learning outcomes at all levels of the curriculum. Laptop optional"
  },
  {
    "title": "The effect of environment on computer science curriculum",
    "abstract": "In this paper by tracing the history of the programs and outlining the programs themselves, a comparison will be made of the factors that lead to the creation and development of a computer science program in a large state university and in a small liberal arts college. In the first case the program leads to a baccalaureate degree in computer science. In the second it is a branch of the mathematics curriculum.\n Along with the factors of educational philosophy environmental factors such as the relationship of the department to the institution, equipment desired and available, the relationship to the computer center and facilities for faculty development will be considered."
  },
  {
    "title": "Providing Students with Standardized, Cloud-Based Programming Environments at Term's Start (for Free)",
    "abstract": "For CS50 at Harvard, we have long provided students with a standardized programming environment, to avoid start-of-term technical difficulties that might otherwise arise if students had to install and configure compilers, interpreters, and debuggers on their own Macs and PCs. (For many students, \"hello, world\" is challenge enough on day 0, without also encountering \"command not found\" at the same time!) We originally provided students with shell accounts on a university-managed cluster of systems. We then transitioned to a cloud-based equivalent so as to manage the systems ourselves, root access and all. We transitioned thereafter to client-side virtual machines, to scale to more students and enable GUI-based assignments. We have since transitioned to web-based environments, complete with code tabs, terminal windows, and file explorers, initially implemented atop AWS Cloud9 and now, most recently, GitHub Codespaces, an implementation of Visual Studio (VS) Code in the cloud, free for teachers and students alike. In this workshop, we'll discuss the pedagogical and technological advantages and disadvantages of every approach and focus most of our time, hands-on, on using and configuring GitHub Codespaces itself for teaching and learning. Along the way, attendees will learn how to create their own Docker images and \"devcontainers\" for their own classes and any languages they teach. Attendees will learn what is possible educationally by writing their own VS Code extensions as well. And how, at term's end, to \"offboard\" students to VS Code itself on their own Macs and PCs, so as to continue programming independent of Codespaces."
  },
  {
    "title": "“CodePlus”—Measuring Short-Term Efficacy in a Non-Formal, All-Female CS Outreach Programme",
    "abstract": "The provision of all-female computer science outreach programmes is a common strategy used to foster greater interest in the subject for high school aged girls. Based on key factors that affect girls’ interest in computer science (CS), outreach programmes often share much in their approach. Nonetheless, there is criticism from a research perspective concerning how programmes evaluate their efficacy, and how the role of pedagogy is under-explored. This article describes the design of CodePlus, a non-formal CS outreach programme based in an Irish University, Trinity College Dublin, and the methods by which the programme is evaluated. This article aims to contribute to this area by reporting on a social constructivist pedagogical model for all-female CS outreach activities, evaluated with a structured research approach. The results from the large sample size (n=856) are positive, with participants showing statistically significant changes in key attitudinal and intentional variables concerning girls’ interest in studying computer science."
  },
  {
    "title": "Teaching human-computer interaction: reports from the trenches",
    "abstract": "Most schools introduce HCI into the CS curriculum through a bootstrapping process. There are many excellent HCI programs at universities around the world, and some new faculty with HCI graduate degrees are starting to appear. But the extreme shortage of faculty forces most schools now starting to teach HCI to use the time-honored method of learning a subject by teaching it.Consensus: Insert HCI into any opening you can find. Learn more about the subject yourself. Let colleagues get comfortable with the idea. A required course in HCI may be some years off, or maybe you will never do exactly that, but you will have laid the foundation for getting HCI into your curriculum."
  },
  {
    "title": "Introduction to the Special Issue on Web Development",
    "abstract": "Despite its prevalence in computing, web development is underrepresented in computing curricula and computing education research. This special issue takes a step towards improving its representation with three articles on web development education. Drawing upon diverse methods from a variety of contexts, the articles address challenges of teaching web development and common difficulties students encounter when learning particular concepts. All three articles identify web development as a promising avenue for motivating students in their study of computing."
  },
  {
    "title": "Uncovering the Hidden Curriculum of University Computing Majors via Undergraduate-Written Mentoring Guides: A Learner-Centered Design Workflow",
    "abstract": "The hidden curriculum consists of the unwritten rules, unspoken norms, and field-specific insider knowledge that are essential for student success but are not taught in classes. Examples include social norms about how to interact with authority figures, where to ask for unadvertised career-related opportunities, and how to navigate around the official rules of a bureaucracy. The hidden curriculum can be pervasive in university computing majors because some students come in with more prior childhood exposure to technology culture and can thus navigate this cultural context more fluently. It is possible to learn this type of tacit knowledge from personal mentors, but not everyone has access to a good mentor. To address this challenge, this paper presents a novel thesis for how to teach students the hidden curriculum in a more scalable way: We propose that a peer-written guide that has a relatable tone and a focus on local context can emulate what a peer mentor does by emotionally resonating with students, teaching them aspects of the hidden curriculum, and motivating them to take concrete action. To demonstrate this thesis we created a mentoring guide for interdisciplinary computing HCI majors at our university. Interviews with 17 students and a survey of 112 students showed that our guide’s relatable tone could emotionally resonate with students, that it boosted some readers’ self-confidence, and that it inspired them to take actions such as creating a project portfolio. Based on these experiences, we developed a five-step learner-centered design workflow to help others create guides for their own local contexts, with recommendations for 1) setting up a mentoring guide, 2) needfinding, 3) creating, 4) distributing, and 5) maintaining."
  },
  {
    "title": "The Engaging Computer Science Education Laboratory: A Mixed-Methods-Based Design of an Innovative Classroom for Informatics Teacher Education",
    "abstract": "As innovative classrooms start integrating new educational media, most informatics educators rely on classic computer rooms. Even though computers might still be seen as the main tool for representing and processing information, contemporary classrooms should include a variety of media to enable theoretical and hands-on approaches alike, and collaborative learning settings. To design the Engaging Computer Science Education Laboratory (ECSE Lab) at the Goethe University Frankfurt, we conducted a mixed-methods study on how future Computer Science classrooms should be designed according to 33 informatics preservice teachers and how such a didactical laboratory can support teacher education. The quantitative questionnaire results show that: 1) While the computer remains the most preferred tool, preservice teachers would like Computer Science Education classrooms to be equipped with a variety of other analog and digital media. 2) Different topics of Computer Science Education require diverse media uses. 3) Even though opinions differ regarding the ideal seating arrangements, more than half of the students prefer group settings. A qualitative data analysis from an open padlet indicates that the uses of such a didactical laboratory comprise especially experimenting with media, realizing new ideas for teaching practices, preparing classes, studying, and the use as a seminar room. Practical implications from these results are: The ECSE Lab (see Figure 1) will be equipped with a variety of analog media (whiteboards, a moderation kit, craft materials) and digital media (stationary computers, a projector, interactive whiteboards, laptops, microcontrollers, tablets, smartphones, cameras) as well as flexible furniture to allow situation-based settings."
  },
  {
    "title": "Test construction and administration strategies for large introductory courses",
    "abstract": "Large introductory courses in computer science make test construction and administration a particularly difficult problem for the instructor. Multiple-choice computer-graded tests can be used to alleviate this problem by testing not only in the knowledge areas of history, hardware, software and applications but in the area of programming skills as well. Several illustrations of the type of multiple-choice question that can be used to test the skills of 1) Reading a Flowchart 2) Reading a Program 3) Converting a Flowchart to a Program and 4) Writing a Program are given and are discussed in terms of their effectiveness. Practical issues of test administration such as the pre-plan, open vs closed-book, cheating and grading are also discussed. The paper attempts to mildly formalize a shadowy area of computer science that has heretofore existed primarily as folklore and hearsay."
  },
  {
    "title": "Towards a Fine-grained Analysis of Complexity of Programming Tasks",
    "abstract": "Bloom's and SOLO taxonomies have been used to describe the complexity of computer science tasks and student's outcome. However, using these taxonomies have coarse granularity and programming tasks with very different demands could be equally classified at the same level. My research proposes a new framework using Neo-Piagetian stages of development based on the Model of Hierarchical Complexity (MHC) that enable formal definition and fine-grained evaluation of programming tasks nuances in paradigms, languages, and constructs. By empirically validating the model, I expect it to be a valuable tool to provide best practices to develop pedagogical approaches and tools."
  },
  {
    "title": "Why do CS1 Students Think They're Bad at Programming?: Investigating Self-efficacy and Self-assessments at Three Universities",
    "abstract": "Undergraduate computer science (CS) programs often suffer from high dropout rates. Recent research suggests that self-efficacy -- an individual's belief in their ability to complete a task -- can influence whether students decide to persist in CS. Studies show that students' self-assessments affect their self-efficacy in many domains, and in CS, researchers have found that students frequently assess their programming ability based on their expectations about the programming process. However, we know little about the specific programming experiences that prompt the negative self-assessments that lead to lower self-efficacy. In this paper, we present findings from a survey study with 214 CS1 students from three universities. We used vignette-style questions to describe thirteen programming moments which may prompt negative self-assessments, such as getting syntax errors and spending time planning. We found that many students across all three universities reported that they negatively self-assess at each of the thirteen moments, despite the differences in curriculum and population. Furthermore, those who report more frequent negative self-assessments tend to have lower self-efficacy. Finally, our findings suggest that students' perceptions of professional programming practice may influence their expectations and negative self-assessments. By reducing the frequency that students self-assess negatively while programming, we may be able to improve self-efficacy and decrease dropout rates in CS."
  },
  {
    "title": "A \"Multiple Executions\" Technique of Visualization",
    "abstract": "Algorithm visualizations can be structured or presented in different ways: animation, multiple algorithms, etc. In this paper, we present a presentation format that has hardly been explored, namely to display simultaneously visualizations of a given algorithm for several test cases. By similarity with other presentation formats, we call it the \"multiple executions\" technique. We illustrate this presentation format with a history-preserving graphical representation, namely recursion trees. Multiple executions composed of recursion trees provide at a glance a view of the behavior of an algorithm in different situations. We illustrate their application to a number of issues in algorithm courses. We also report on two evaluations conducted on the effects of structured multiple executions on students' comprehension of complex recursive algorithms. The results show some statistically significant differences on students' skills for some design tasks."
  },
  {
    "title": "Math IDE: A Platform for Creating with Math",
    "abstract": "To inspire student engagement in middle school math, we explore the possibility of using generative AI to enhance the creativity of math learning. We present the Math IDE, a math education environment in which students learn about math concepts by building artifacts. We aimed to create a platform in which students can engage with mathematical concepts, create an artifact that embodies the math that they are learning about, and practice their high-level specification skills. In the current iteration of the Math IDE, students can create custom web pages by describing and demonstrating understanding of the math that is involved in the web page. In this short overview, we describe our process and discuss several open questions regarding the design and application of this novel method of math education."
  },
  {
    "title": "Girls Immersed in Robotics Learning",
    "abstract": "Girls Immersed in Robotics Learning engages middle school Latina girls in computer science and co-robotics with an immersive narrative of helping a Puerto Rico community recover from a hurricane. We are developing GaleForce, a Unity virtual robotics game where students can learn to code virtual robots and drones using a block-based programming language, and have collected data from a week-long workshop with a group of 9, mostly Latinx, 4th and 5th graders. Students showed gains from 13% - 50% in interest in pre/post surveys, and gains in scores ranging from 11% to 39% on content in pre/post assessments. Preliminary backend learning analytics results indicate that the students consistently used the 3D virtual world of San Juan as their point of reference for programming and wrote programs that focused on direction and distance, but did not use more advanced loops, conditionals and black boxed blocks. These results support a developmental approach to teaching programming, focusing first on concrete referents for program construction."
  },
  {
    "title": "Designing Equity-Centered Formative Assessment Artifacts for Computing",
    "abstract": "Talladega County Schools (Talladega) is working to design and implement an inclusive K-12 computing pathway in their district as part of a larger Research Practice Partnership (RPP). This poster describes the reflections of a district leader in Talladega who led an inclusivity in computing initiative related to the pathway. The Talladega committee reflected on their pathway within the context of their district equity goal and centered conversations around how to support young women and students from low socio-economic households to participate in computing. After reflecting and discussing, the group designed equity-centered formative assessment tools for the three overarching competencies: Algorithmic Thinking; Data Collection and Analysis; and Creating Models and Simulations. This work builds on literature about designing equitable computing learning environments for students."
  },
  {
    "title": "CS1 Scaffolded Activities: The Rise of Students' Engagement",
    "abstract": "We introduced a model of activity-based active learning class which has been practiced for a few years in [4]. While it may seem an easy task, designing an effective activity-based active learning can be quite challenging. Active learning adds new benefits to teaching including increased student involvement, social interaction, and hands-on learning, etc. [1]. However, in some situations, it may not provide an efficient learning environment. For example, we may assume that it is effective for educators to provide students with an environment where they can perform peer instruction and social learning. It could be further assumed that students will naturally find their way around the activities by following the instructions or peer instruction [2]. Such issues depend on the way activities are designed and executed. In this work, we discuss how the scaffolding of activities can help students stay engaged with the course without feeling lost or disconnected. Scaffolding refers to methods used to help students progress towards stronger understandings and eventually more independence in the learning process [3]. Our scaffolding methods smoothly transition students from lower to higher levels of challenge through an appropriate breakdown of course contents into activities of various types, proper sequencing of concepts and formative assessment questions. We believe that such proper breakdown is essential to keeping students engaged. We don't want students to feel bored (when challenge level is too low) or overwhelmed (when the challenge level is too high). Our findings indicate statistically significant differences in participation and engagement when using scaffolded activities in our introductory programming course (CS1)."
  },
  {
    "title": "Gender differences in programming? (poster session)",
    "abstract": "This paper presents the findings of an interactive poster of the same name that was displayed at two Computer Science Education conferences during the summer of 2001. Delegates were presented with fragments of code written by first year Computer Science undergraduates and were asked to determine whether the code authors were male or female. The findings suggest that not only is it not possible to determine the gender of the author, but that the gender stereotyped 'clues' relied upon as a basis for the determination are unreliable predictors."
  },
  {
    "title": "Teaching Teachers to Teach Computer Science - Unplugged or Plugged-in?",
    "abstract": "As new computing curricula are rolled out around the world, teachers are having to adjust to teaching new topics, finding new resources, and even working in a different style in the classroom. For some, this is a long-awaited change that they are more than ready for, but for many, particularly in primary school, it is unfamiliar territory and a foreign language, and it might even appear to threaten deeply-held values they have about what their learners need. Because the curriculum is new, it is unlikely to have been part of their own education or their preparation for being a teacher. So how do we reach and engage such teachers? What would motivate them to invest in this change? How do they see this mysterious new thing called \"coding\"? This talk will report on experience working with teachers in New Zealand, and also look at approaches used around the world. The role of CS Unplugged [1] will be considered, as well as the general issues that teachers face around identifying what and how they should teach this new curriculum area."
  },
  {
    "title": "Studying Implementation of Secondary Introductory Computer Science: Pilot Results (Abstract Only)",
    "abstract": "Education researchers have extensively studied how secondary teachers adopt and adapt new curriculum and new teaching practices, especially in science and mathematics. Their goals are often to learn ways to help teachers enact new pedagogical approaches, so the results inform teacher professional development, as well as building knowledge in the field. Changing teaching practice often involves changes across a number of fronts: for example, inquiry-based teaching of science involves skills in developing questions, supporting student whole-class discussion and sense-making, and allowing students time to investigate authentic problems. Research is now underway to discover ways to similarly help teachers in K-12 computer science (CS). K-12 CS curricula have emphasized inquiry- and equity-focused teaching practices as ways to engage and include students while simultaneously deepening students? understanding of CS concepts and practices. While researchers have focused on measuring student attitudes to discern engagement and feelings of inclusivity, less work has been done on how implementation affects student learning. To study this, CS education researchers need frameworks and instruments to measure implementation, attitudes, and learning. We are developing and validating instruments that support mixed-methods study of curriculum enactment and teaching quality, with a focus on inquiry, equity, and computational thinking practices. This poster will present preliminary results from a large-scale study of implementation in secondary CS classrooms to build a more systematic understanding of evolving practices in measuring curriculum enactment and teaching quality."
  },
  {
    "title": "Curricula in computer science and engineering: needs and alternatives",
    "abstract": "This paper offers a brief review and survey which includes the following curricula: (1) A Curriculum in Computer Science and Engineering, The IEEE Computer Society (1977); (2) Curriculum Recommendations for the Undergraduate Program in Computer Science, The ACM (1977); (3) Curriculum Recommendations and Guidelines for the Community and Junior College Career Program in Computer Programming, The ACM (1977); (4) Guidelines for IEEE EE and Ad Hoc Visitors on ECPD Accreditation Teams, Computer Science and Engineering Programs, IEEE/ECPD (1977); (5) The Computer in the Engineering Curriculum- CoED/ASEE(1977); (6) Special Interest Group on Software Engineering Education, SIGSOFT/ACM. A brief outline of some of the future requirements in the following areas is also given: (1) Continuing Education; (2) Computer-oriented business and engineering education; (3) maintaining up-to-date facilities."
  },
  {
    "title": "An Interactive Tutorial for Learning to Manipulate References: (Abstract Only)",
    "abstract": "Understanding basic manipulation of object references is a conceptual prerequisite to understanding many data structures, beginning with linked lists and trees. Unfortunately, there is often a gap between introductory programming courses that introduce reference variables and creation of objects, and second-semester programming courses that immediately skip to introducing linked lists. As a consequence, students begin using references extensively during Data Structures and Algorithms courses without enough knowledge about how references work. To fill this gap, we created a tutorial about basic use of references and the manipulation of objects using references. The tutorial, implemented as part of the OpenDSA eTextbook system, focuses on learning through visualizations and interactive exercises. Students work a series of small code-writing exercises, inspired by the JhavePOP system. These exercises use simple program visualization to let students see the result of running their program. Manipulative exercises test student proficiency at reading and understanding small sections of code that use references to link objects. All exercises are automatically assessed, providing immediate feedback. Our evaluation of the tutorial's effectiveness will focus on identifying and correcting student misconceptions. Optional sections of the tutorial introduce the program stack and the dynamic memory heap."
  },
  {
    "title": "A course in effective programming",
    "abstract": "This paper describes a graduate Computer Science course in which all aspects of the programming process are examined.\n The course has been taught for the past three years, and represents an attempt to pull together various results of researchers working on this rather undeveloped but important area. Unfortunately space does not permit the inclusion here of many details or examples. Rather, the emphasis is on the form of the course and how the reference material is used in pursuing the course objectives. (The topic of program measurement is expanded on somewhat, being a topic of interest to the author and one about which little has been said elsewhere.)"
  },
  {
    "title": "Discrete partnership: a case for a full year of discrete math",
    "abstract": "Discrete mathematics lies at the heart of the discipline of computing and represents one of the few bodies of knowledge with consistent content in our young and changing curriculum. We offer a model of a full-year, two-course experience of discrete structures with the initial course taught by computer science faculty and the second course taught by faculty in mathematics. We argue for the strengths gained in multiple and repeated exposure to the rich set of core topics and for the initial course to occur in the first year rather than the traditional advice to \"take calculus\". In particular, we present a model of collaboration with mathematics faculty that provides computer science students with an enriched breadth and depth of exposure while helping small departments to handle the constraints in scheduling."
  },
  {
    "title": "Lessons Learned in 10 years of Distributed Systems Capstones",
    "abstract": "This poster presents our experiences in offering 10 years of CS/SE capstone projects in the distributed systems area. Based on a presentation of typical example projects over time we draw interesting conclusions. Our observations over this time span address suitable project subjects, development methodology as well as student motivation in projects and how to raise it. We will show that certain aspects have not changed much over time such as: system integration and its effort is always larger than expected. Similarly, using even a well-established enterprise open source technology usually requires more work than estimated upfront. Also, better students tend to prefer more challenging projects. Other aspects have improved making use of recent findings in research and technological development such as using agile development methodology or novel communication means. Also, we demonstrate that good students projects can contribute to research publications and that an international setting for capstone projects is both raising motivation for students as well as increasing organizational challenges. Overall we found that company sponsored projects generally increase result quality as the \"real world touch\" seems to be appealing."
  },
  {
    "title": "High-tech dishonesty: cheating, plagiarism and detection",
    "abstract": "Introduction Advances in computing and telecommunication technology provide an abundant number of new opportunities for academic dishonesty. Anecdotal evidence suggests that students are more aware than faculty of various mechanisms for cheating on exams, plagiarizing assignments, and soliciting work for pay. Fortunately, technological advances also provide an alert instructor with tools for combating academic dishonesty."
  },
  {
    "title": "Exploring Programming Instruction in Multidisciplinary Contexts",
    "abstract": "Programming is becoming skill required by a wide range of students, not just CS majors. Furthermore, not only are non-CS majors learning to program, but many non-CS faculty find themselves teaching programming courses. Introducing these faculty and students to the craft of programming is accompanied by a number of unique challenges. How can non-CS faculty position themselves as programming experts, given they are not CS people? How can we convince non-CS students that coding is a necessary skill? Often our non-computing majors are reluctant, stating \"Programming isn't what I signed up for!\" Many non-CS students are not receptive to learning new programming languages due to a lack of intrinsic motivation coupled with technological anxiety. These factors often result in low-self efficacy, which must be overcome in order to explore, play, and learn. This Birds of a Feather discussion brings together instructors from diverse disciplines to discuss the teaching of programming to a range of students, the barriers that exist for non-computing students, and the interventions that attempt to mitigate these issues."
  },
  {
    "title": "Outreach programs to promote computer science and ict to high school and middle school students",
    "abstract": "Catherine Lang Swinburne University of Technology Information and Communication Technologies Australia +61 3 9214 5884 clang@swin.edu.au Reyyan Ayfer Bilkent University Ankara, Turkey +90 312 290 5065 ayfer@bilkent.edu.tr Annemieke Craig Deakin University School of Information Systems Deakin University, Australia +61 3 5227 2152 acraig@deakin.edu.au Jane Chu Prey Microsoft Corporation Microsoft Research Redmond, WA +11392145884 jprey@microsoft.com"
  },
  {
    "title": "Integrating Ethics into Introductory Programming Classes",
    "abstract": "Increasing attention to the role of ethical consideration in computing has led to calls for greater integration of this critical topic into technical classes rather than siloed in standalone computing ethics classes. The motivation for such integration is not only to support in-situ learning, but also to emphasize to students that ethical consideration is inherently part of the technical practice of computing. We propose that the logical place to begin emphasizing ethics is on day one of computing education: in introductory programming classes. This paper presents one approach to ethics integration into such classes: assignments that teach basic programming concepts (e.g., conditionals or iteration) but are contextualized with real-world ethical dilemmas or concepts. We report on experiences with this approach in multiple introductory programming courses, including details about select assignments, insights from instructors and teaching assistants, and results from surveys of a subset of students who took these courses. Based on these experiences we provide preliminary plans for future work, along with a roadmap for instructors to emulate our approach and suggestions for overcoming challenges they might face."
  },
  {
    "title": "Delivering Round-the-Clock Help to Software Engineering Students Using Discord: An Experience Report",
    "abstract": "This experience report describes the delivery of round-the-clock help to students using Discord (a popular messaging and voice/video calling platform) in a remote software engineering course. Students in the course learn full-stack web development using Ruby on Rails and PostgreSQL, and work in teams to develop web applications. Our central goal in offering round-the-clock help using Discord was to increase the amount of help that students receive from teachers (i.e., teaching assistants and the instructor). Indeed, we found that our 24/7-Discord approach led to a considerable increase in the amount of student-teacher interaction versus the approach used previously, which emphasized in-person office hours and a question-and-answer forum in Piazza. Moreover, students from underrepresented groups in computer science interacted with teachers at a rate comparable to other students, and we received consistently positive feedback from students regarding the approach. We also made several key observations about when students tended to seek help, including that they sought help the most between 7:00 p.m. and midnight, that help seeking spiked right before deadlines, that students posted the fewest help messages on weekends, and that students posted significantly more messages during the first half of the course, which emphasized skills assignments, versus the second half, which focused on team project work."
  },
  {
    "title": "Incorporating Retakes in a Robotics Class with Labs",
    "abstract": "Lab assignments, in which students build and program robots to accomplish tasks in various environments, are a central component in many undergraduate robotics classes. Such activities require that students operationalize concepts learned in class. However, physical robots are prone to uncertain real-world behavior, making debugging challenging and causing many students to feel stressed about being graded based on their robot's performance. Therefore, we incorporated retakes into our undergraduate robotics class, allowing students to learn from their mistakes and master class content while improving their robots. Initial results show that students widely embrace retakes, use the opportunity to improve, and feel less stressed about the assignments."
  },
  {
    "title": "Snap!6, Introducing Hyperblocks!",
    "abstract": "In early July we released Snap! version 6, with many cool new features, including a ground-up rewrite to be faster and reduce memory use by up to 20x. However, the most powerful 'big idea' is the introduction of an APL-style programming paradigm, which we call 'Hyperblocks'. This augments all existing reporter-block scalar inputs to accept N-dimensional lists of any shape as arguments as well, instead of being considered a domain error. These 'dimension-generic' blocks allow us to teach complex concepts without the need for loops or our beloved map block. For example, the domain of the multiply block had previously only been numbers, and if we had wanted to return a new list in which all of the elements were multiplied by 10, we would have had to use map(10*( ))over(data). Now we can simply say 10*data! In Snap! 6, Hyperblocks enable fast vectorized computations, making it much more efficient to do data analysis and media computation projects. There's nothing that beats a live demonstration of all these wonderful features, and we have two veteran power users to take it through its paces."
  },
  {
    "title": "The revolution will be televised: perspectives on massive open online education",
    "abstract": "1. SUMMARY While online educational resources have existed for decades, the past year has seen a tremendous acceleration in the adoption and potential disruption afforded by recent online education initiatives. In the Fall of 2011 the concept of Massive Open Online Courses (MOOCs) more broadly entered the public consciousness with a group of three Stanford CS courses collectively enrolling over 200,000 students, and gaining national press coverage from the New York Times [2] and other outlets. Since that time, a number of new platforms have emerged for online course delivery, including Udacity and Coursera (two for-profit companies started by Stanford faculty, the latter of which partners with over 30 elite universities), EdX (a not-for-profit consortium, composed of MIT, Harvard, UC Berkeley, and the University of Texas system), and the Minerva Project (a for-profit online university with $25 million in funding)."
  },
  {
    "title": "Modern introductory computer science",
    "abstract": "There have been numerous testimonies to the inadequacies of our educational system [83]. For undergraduate computer science educators, major concerns regarding student preparation include poor problem solving and critical thinking skills, weak mathematics background, an inability to convey thoughts and concepts, and a lack of motivation. These problems can be addressed in the introductory computer science course by developing an integrated approach to effectively teaching discrete mathematical foundations, fundamental computer science concepts, and problem-solving skills. This paper is conceptual in nature and introduces some specific examples of possible approaches to overcoming these deficiencies and problems."
  },
  {
    "title": "A Curriculum Model Featuring Oral Communication Instruction and Practice",
    "abstract": "Good oral communication skills are essential for success in the workplace. Burge [3] recently highlighted the need to create a curriculum-wide program emphasizing communication skills. We have implemented a curriculum that provides communication skills instruction and practice at each level of the computer science major. Here we present a description of the coursework emphasizing formal presentation and small group communication skills. We also share findings from a survey of alumni showing their perception of communication preparation. Even in our program that provides significant opportunities for communication skill development, the majority of alumni felt that additional instruction should be integrated into the major curriculum."
  },
  {
    "title": "The Value of Aligning Your Course for Curricular Improvement",
    "abstract": "CS research has shown that many CS educators do not use an evidence-based approach to make changes to their course. Fossati and Guzdial have found that educators use their intuition, student feedback and anecdotal evidence to make course improvements. Using these approaches makes it difficult to identify the effectiveness of the improvement. In instructional design, curriculum alignment is used to evaluate the degree which the learning objectives, course content, and assessment methods are in agreement with each other. This provides instructors with a detailed view of their course and areas that need improvement. Current alignment processes are impractical for a course instructor to apply, requiring a panel of experts and training on the process. We developed a new alignment process applicable by a single course instructor limiting the need for a panel of experts, however the process took 75 hours to apply. In this paper, we describe a prototype alignment tool, AlignET, that automates the new alignment process providing instructors with results they can use to make course improvements. We conducted a case study, where four instructors at Virginia Tech used AlignET to evaluate the alignment of their course and identified specific improvements to make to their course. AlignET reduced the time to complete the alignment process to less than 11 hours. The instructors identified gaps in their instructional methods and identified learning objectives they emphasized more than others. The case study provided us with critical improvements to make to AlignET."
  },
  {
    "title": "Experience Report: Identifying Unexpected Programming Misconceptions with a Computer Systems Approach",
    "abstract": "An increasing number of students arrive at university with programming experience and pre-formed mental models. These models are often incorrect, with students holding entrenched misconceptions. In this paper, we describe a study that investigated whether making explicit connections between our introductory Python programming and computing systems courses could expose mental models and help identify and fix misconceptions. We hypothesised that students would develop a correct mental model by creating a low level systems implementation of a high level program. While we identified misconceptions, these prevented the students from making explicit links and correcting their mental models. We detail these misconceptions, develop a set of hypotheses for why these were held, and suggest future studies."
  },
  {
    "title": "Going SOLO to assess novice programmers",
    "abstract": "This paper explores the programming knowledge of novices using Biggs' SOLO taxonomy. It builds on previous work of Lister et al. (2006) and addresses some of the criticisms of that work. The research was conducted by studying the exam scripts for 120 introductory programming students, in which three specific questions were analyzed using the SOLO taxonomy. The study reports the following four findings: when the instruction to students used by Lister et al. - \"In plain English, explain what the following segment of Java code does\" - is replaced with a less ambiguous instruction, many students still provide multistructural responses; students are relatively consistent in the SOLO level of their answers; student responses on SOLO reading tasks correlate positively with performance on writing tasks; postgraduates students manifest a higher level of thinking than undergraduates."
  },
  {
    "title": "First, do no harm: a curricular approach to reliability",
    "abstract": "To promote reliability, the adoption of deferred error coding within computer science curricula is advocated. It is both a sound development strategy and aligned well pedagogically. By deferring specific error handling (first, doing no harm) the student better appreciates error handling's subtleties and its importance as an independent topic. The presentation will also include taxonomies of exceptions and exception handlers, and the relationships between them. Much of the discussion is language independent, but specific attention is given to the Java checked exception controversy."
  },
  {
    "title": "Scaling Responsible Computing Globally: Lessons from the US, Kenya, and India",
    "abstract": "There is a vibrant body of work on responsible computing pedagogy across the world. However, there are comparatively fewer programs in the Global South compared to their counterparts in the Global North. This lightning talk describes our current efforts to scale the Responsible Computing Challenge (RCC) globally. The project was initiated in 2018 across the U.S. with its first iteration transforming undergraduate curricula at 17 universities in the country. In 2022 RCC was implemented in Kenya across eight universities, with a call for proposals recently launched in India. Scaling the project aims to increase the impact of responsible computing pedagogy across the world with an emphasis on developing curricula for and within local contexts. Existing inequities that are embedded within and amplified by computing technologies point to a need for a new generation of technologists who can draw from an interdisciplinary toolkit to re-imagine computational innovations. Faculty and students are invited to attend the presentation to engage in lessons drawn from integrating sociotechnical perspectives in computing courses and consider collaborating in RCC towards global impact in prioritizing responsible software and systems. In this lightning talk, we will discuss the project's structure, impact examples from the pilot implementation, early lessons from expanding to Kenya and India, and ideas for collaboration in the global expansion."
  },
  {
    "title": "Computer Science at Staten Island Community College: Teaching Computer Science in an open admissions environment",
    "abstract": "Teaching Computer Science on an open admissions campus with no tuition raises two major problems: many students are poorly prepared for college-level work; the students have extremely diverse aspirations and needs.\n In response to this challenge, the Computer Science faculty at Staten Island Community College has evolved the teaching methods described below, which include use of a non-mathematical approach especially in lower-level courses, and a practical programming laboratory to be taken as a part of each course. In addition, a variety of new course and curriculum options have been developed."
  },
  {
    "title": "The CCLA: Cultivating a Culture of Computing at a Small Liberal Arts University",
    "abstract": "The Doane University Center for Computing in the Liberal Arts (CCLA) provides a collaborative and supportive environment for Doane students, faculty, and staff, who are interested in incorporating computing into their schoolwork, projects, or research. Our operating analogy is that the CCLA is like a Writing Center, but for computing instead of prose. Ultimately, the CCLA aims to foster a culture of computing at Doane -- all of Doane. Therefore, the CCLA supports any academic discipline on campus: STEM disciplines, Business, Art, Social Sciences, Theater, and so on. Likewise, the CCLA supports a wide range of computing skills, from spreadsheets and word processing through databases and programming and into more advanced technologies such as machine learning and high-performance computing. The CCLA's mission is to be available to help any student, faculty, or staff member with any computer-related problem-solving task. Creating this culture of computing at the university will help equip our students with the computing skills necessary to become outstanding contributors and leaders in both the public and private sectors."
  },
  {
    "title": "A Data-Driven Analysis of Informatively Hard Concepts in Introductory Programming",
    "abstract": "What are the concepts in introductory programming that are easy/hard for students? We propose to use Dimension Extraction algorithm (DECA) inspired by coevolution and co-optimization theory to answer this question. We propose and use the metrics of informatively easy/hard concepts to identify programming concepts that are solved correctly by the most \"dominated student\" versus solved incorrectly by the most \"dominant student\". As a proof of concept, we applied DECA to analyze the data collected by software tutors called problets used by introductory programming students in Spring 2014. We present the results, i.e., informatively easy/hard concepts on a dozen different topics covered in a typical introductory programming course. It is hoped that these results will inform programming instructors on the concepts they should (de)/emphasize in class. They will also contribute towards creating a concept inventory for introductory programming."
  },
  {
    "title": "A 12 Week Full Stack Web Course in 2017",
    "abstract": "Taught and continually evolved since 2001, we discuss the critical path through a full stack, single term web development course including a discussion of topics and academic content. Our course design addresses the challenge of selecting a small collection of topics, technologies and classroom examples that provide the best pedagogical value in the rapidly changing area of web development. With the solid understanding of the fundamental Web/CS concepts learned in this course, the students are able to adapt to the favorite web frameworks of their employers and solve problems on the web."
  },
  {
    "title": "Can CS1 Curricula Be Used For Middle School Computer Programming Education?",
    "abstract": "Current computing education efforts do an excellent job of designing engaging curricula for middle school students through block-based platforms and multimedia project-based content. However, the programming concepts covered are notably and understandably simpler than those covered in college-level AP CS or CS1. In this paper, we present a new position that today's college-level CS1 curricula can and should be taught to middle school and early high school students. We discuss our efforts in teaching Python programming to this age group by adapting the pedagogical techniques of the CS1 course offered at a public university. Preliminary observations from an 8-week summer pilot study involving 7th - 10th grade students suggest that these students can learn CS1 concepts in depth when memory diagrams, extensive practice, and engaging reviews are relied upon."
  },
  {
    "title": "A stratified view of programming language parallelism for undergraduate CS education",
    "abstract": "It is no longer news that undergraduates in computer science need to learn more about parallelism. The range of options for parallel programming is truly staggering, involving hundreds of languages. How can a CS instructor make informed choices among all the options? This panel provides a guided introduction to parallelism in programming languages and their potential for undergraduate CS education, organized into four progressive categories: low-level libraries and; higher-level libraries and features; programming languages that incorporate parallelism; and frameworks for productive parallel programming. The four panelists will present representative examples in their categories, then present viewpoints on how those categories relate to coursework, curriculum, and trends in parallelism."
  },
  {
    "title": "The Impact of Integrating Culturally Responsive Pedagogy and Content in Introductory Computer Science",
    "abstract": "This poster will provide an overview of the course redesign process undertaken at a 4-year state university and its feeder community college, both are Hispanic Serving Institutions. The redesign focused on promoting culturally relevant learning experiences in introductory computer science courses. Impact of the redesign is compared to similar courses not involved with the project."
  },
  {
    "title": "Culture and environment as determinants of women's participation in computing: revealing the \"women-CS fit\"",
    "abstract": "There are some arguments that suggest women need academic handholding, such as a \"female friendly\" curriculum, in order for them to participate and be successful in computer science and related fields. Then there are other arguments that suggest we need to change the field to suit women or help women adjust to the field. In this paper we present a different perspective that shows none of these may be necessary. The \"Women-CS Fit\" is already there! Specifically, under certain cultural and environmental conditions we can see that women fit very well into computing fields and what we have been attributing to gender is actually the result of cultural and environmental conditions. The reasons for women participating in -- or not participating in -- the field of computer science have little to do with gender and a lot to do with culture. In other words, we need to recognize that this is a cultural issue, and an issue that concerns us all. Appropriate local interventions in the micro-culture can have large effect. This argument is illustrated in this paper by three case studies."
  },
  {
    "title": "Exploring How Students Use an Online Learning Environment",
    "abstract": "The number of online classroom environments in universities has been steadily rising. As a result, it has become more important to understand how students utilize these online environments, as well as to identify the most effective learning strategies. This research identifies strategies used by students in an online tool associated with a first-year university computer science class. Utilizing sequential pattern mining, we identify common strategies used by high- and low-performing students. The goal is to understand how higher performing students utilize an unsupervised online learning environment to identify effective strategies in this setting. This will allow instructors to direct students toward effective methods of using online classroom tools."
  },
  {
    "title": "Braided teaching in secondary CS education: contexts, continuity, and the role of programming",
    "abstract": "In this paper, we propose a new approach to thinking about and implementing Computer Science curricula in secondary education. The characteristic feature is to organize the items to be taught into what we call \"strands\" which then can be interlaced during the course. This naturally leads to a spiral curriculum in secondary Computer Science education. In the view of our proposed approach, we also comment on the role of programming in secondary education."
  },
  {
    "title": "Teaching biologists to compute using data visualization",
    "abstract": "The accelerating use of computation in all aspects of science continues to widen the gap between student skills and expectations. Currently, computation is taught using one of two approaches: teach students a standard programming language (e.g., FORTRAN, JAVA or C) perhaps augmented by support tools such as Alice or teach them to use a program such as MATLAB by formulating and solving math problems. Both approaches have high failure rates for students hindered by poor mathematics training and weak logic skills. This paper describes an alternative approach that introduces students to computing in the context of data analysis and visualization using MATLAB. Our goal is produce computationally qualified young scientists by teaching a highly relevant computational curriculum early in their college career. The course, which integrates writing, problem-solving, statistics, visual analysis, simulation, and modeling, is designed to produce students with usable data analysis skills. The course is in its third year of implementation and is required of all biology majors at the University of Texas at San Antonio."
  },
  {
    "title": "RoboLIFT: engaging CS2 students with testable, automatically evaluated android applications",
    "abstract": "Making computer science assignments interesting and relevant is a constant challenge for instructors of introductory courses. Android has become popular in these courses to take advantage of the increasing popularity of smartphones and mobile \"apps.\" This has been shown to increase student engagement but it is only the first step, and we must continue to provide support for teaching methodologies that we have used in the past, such as test-driven development and automated assessment. We have developed RoboLIFT, a library that makes unit testing of Android applications approachable for students. Furthermore, by supporting existing automated grading techniques, we are able to sustain large student enrollments, and we evaluate the effects that using Android has had on student performance."
  },
  {
    "title": "Teaching students java bytecode using lego mindstorms robots",
    "abstract": "Assbly language is a valuable subject to teach, yet one of the most underappreciated by students. Students do not see the need for assbly language and they get through it as quickly as possible. Given the time in a computer organization course to teach assbly language, assignments -- either quick-and-easy ones or those contrived-to-teach-a-point -- contribute to this attitude of malaise. This paper documents a project to inject some fun into the teaching of assbly language. First, we switch the language to Java bytecode. Second, we use unique assignments to use Java bytecode with Lego Mindstorms robotics."
  },
  {
    "title": "Computing Ethics Starts on 'Day One': Ethics Narratives in Introductory CS Courses",
    "abstract": "How do you design more responsible computing technologies? You start by training computer science (CS) students, the creators of tomorrow's tech, to think critically about their own action and responsibilities from the first day of their introductory programing course. The standard approach to the CS1 level curriculum needs evolve to make room for ethics instruction presenting students with difficult questions, provocative simulations, and time for personal reflection about ethics and the professional responsibilities of current and future computer scientists, software engineers and other technologists. This poster describes curriculum development work from the Computing Ethics Narratives (CEN) conducted by CS students and faculty engaged in critical thinking about ethical issues related to computing and technological innovation and its widespread influence on individuals and society. The presentation will provide examples of three computing ethics modules that have been piloted into CS1 and CS 2 level courses in both online and in-person settings. Early results of the pilot study are shared along with future work."
  },
  {
    "title": "Group work at postgraduate level: some issues",
    "abstract": "This paper reviews the experience with group assignments during the first five semesters that UNITEC's Master of Computing programme has been offered. Strategies for forming and managing groups are outlined, as well as different approaches to awarding grades to the individual members of the groups."
  },
  {
    "title": "Culturally Responsive Pedagogy in Computer Science (CR in CS)- K-12 Teacher Professional Development- Needs and Challenges",
    "abstract": "The New Mexico teaching workforce does not mirror the demographics of the student population. 60% of NM teachers are white, 34% are Hispanic, and only 3% are Native American, while 61% of NM students are Hispanic, 25% are white, and 11% are Native American, almost guaranteeing that students will not be taught by someone that shares their background and experiences. A potential remedy of this mismatch is for teachers to embrace culturally responsive pedagogy. The goal of this BoF session is to promote a collaborative conversation about mechanisms to expand the under- standing of culturally responsive pedagogy among K-12 computer science teachers and other relevant stakeholders."
  },
  {
    "title": "Practice what you preach: full separation of concerns in CS1/CS2",
    "abstract": "We argue that the failure to separate the concerns in CS1 is the leading cause of difficulty in teaching OOP in the first year. We show how the concerns can be detangled and present a detailed reorganization of contents for CS1/CS2 with CS1 exposing only the client view. We also report on our experience with this new pedagogy after three years of implementation at our institution."
  },
  {
    "title": "Pixels, Post-It's® and CS Principles (Abstract Only)",
    "abstract": "We describe an \"unplugged\" activity that exposes data structures and algorithms involved in image representation and compression, using multi-colored Post-It Notes®. We use Post-It's to illustrate how color images can be encoded and decoded so they can be stored efficiently on a computer and/or transmitted efficiently across a network. This provides an intuitive illustration of bitmaps and the GIF (Graphics Interchange Format), optimized with Lempel-Ziv compression. The algorithms are simple to explain and comprehend, and simultaneously appeal to the participants' sense of art and creativity while demystifying advanced computing concepts and computer graphics. We describe two sample exercises which make use of these concepts. In one exercise, teams of participants create messages with Post-It's, encode them and send them to other teams for decoding. In another exercise, a larger image is encoded and broken into letter paper-sized smaller images to be decoded and reassembled by a group. This activity has proven to engage participants with a wide variety of backgrounds, and provides the background needed for further exploration and discussion of Computer Science Principles, specifically the Big Ideas of Creativity, Abstraction, Data and Information, and Algorithms."
  },
  {
    "title": "Supporting CS Teachers through Local Communities: Perceptions of CSTA Chapter Leaders",
    "abstract": "This paper reports a study of CSTA chapter leaders' percep-tions of their chapter's roles in supporting computer science (CS) teachers. Intent on understanding the impact of member-ship in a professional organization on the development of teacher professional identity, our research revealed that in the chapter leaders' perceptions local CSTA chapters had an im-portant role in supporting the development of their mem-bers' professional identity as a CS teacher."
  },
  {
    "title": "Complex Online Material Development in CS Courses",
    "abstract": "Computer Science (CS) education has a tradition of using online materials to teach courses, whether as a part of a course or having fully online courses. Commonly, the materials to present the subject matter are not just static objects like text or images but also contain automatically assessed exercises and other interactive content. This makes the course systems inherently tied to teaching – limiting pedagogical approaches, types of exercises, and available functionality. Increasingly, CS courses utilize multiple systems to handle various learning and course management related activities. The use of multiple systems brings about traditional software engineering problems, such as development, integration, maintenance, and testing. We present two small studies (case study and interviews) to highlight the issues in developing and running modern online CS courses. Based on these two studies we argue that online courses should be developed with a stronger software engineering approach considering the development process and tools. In addition, we define the term Complex Online Learning Material (COLM) to foster discussion and further research into improving instructor practices in online education."
  },
  {
    "title": "AlignCS: Evaluating the Landscape of K-12 CS Framework Aligned Curricula",
    "abstract": "Computer science education has witnessed an explosion in curriculum options available for K12 teachers and students to engage with in the last 5 years. At the same time, a team of community members worked for a year to produce the K-12 CS Framework, a list of grade-appropriate CS concepts for inclusion in the academic preparation of all students in grades K-12 in the United States. With a rapidly expanding content pool, the CS Education community must be able to identify gaps in content provided to achieve high quality. In this poster we present a landscape of curriculum from the CSforALL curriculum portal and the relative alignments to concepts and grade bands given in the K-12 CS Framework. Through discussion of these data we hope to highlight areas where future curriculum may be needed, and where current curriculum offerings have focused. Data presented in this poster will look at curricula concentrations both by grade band, and by framework concept area including computing systems, networks and the internet, data and analysis, algorithms and programming, and impacts of computing."
  },
  {
    "title": "The evolution of standards for accrediting computer science teacher preparation programs",
    "abstract": "In 1992, the National Council for the Accreditation of Teacher Education (NCATE) adopted guidelines for computer science education teacher preparation programs. The endorsement signaled the emergence of computer science education as a distinct discipline and computer science as a formal secondary subject area. The guidelines were developed through an intense program of research and review by the International Society for Technology and Education (ISTE). Since the passage of the standards, numerous computer science and education professionals have been involved in the process of preparing program folios for review and developing the actual review process. This real experience with the standards helped to identify issues and problems that are common to most programs and that need examination in the current five year review. In this paper, an overview of the guidelines is presented, the review process is described, issues and problems are discussed, and future initiatives are identified."
  },
  {
    "title": "CodeBox64: A Tactile Input Modality for Block Programming (Abstract Only)",
    "abstract": "Many K-12 and university classrooms are now using block programming languages (e.g., Scratch, App Inventor, Code.org) to help students learn how to program. These block programming languages are popular because of their simplicity and \"tinkerability\" allowing novice users to create a project within minutes of first being exposed to the language. Unfortunately, these languages are highly dependent on the mouse and keyboard making them nearly inaccessible for those users with visual or motor impairments. This poster presents CodeBox64, a simplified input modality that is able to program block programming languages in a more tactile approach; it is a Tactile Input Modality (TIM). Because of the simplicity of CodeBox64, it allows visually impaired students to navigate the buttons and knobs with ease. CodeBox64 consists of four navigational buttons (i.e., up, down, left, right), a back button, and an enter button. It also contains an RFID sensor board that allows the user to use physical Lego blocks to execute commands of a block language. While CodeBox64 was originally developed to work with a custom, Blockly language, JamBlocks, it has the potential to work with other block languages. CodeBox64 demonstrates one possible methodology for enabling block languages to be accessible to those users with visual impairments."
  },
  {
    "title": "Simulation and modelling with Stella: a general education course",
    "abstract": "A case is made for teaching the simulation of dynamic systems to upperlevel non-majors as a general education course. Stella(l), a non-procedural, graphics-based simulation language is described along with the philosophy and methodology of the course."
  },
  {
    "title": "A distributed task environment for teaching artificial intelligence with agents",
    "abstract": "It is not uncommon to teach Artificial Intelligence (AI) by asking students to implement agents that embody intelligent behavior. This helps students gain a fuller understanding of the many concepts taught in the course. There are two issues with this approach that deserve attention. First, students come into an AI course knowing how to program in different languages and having different levels of programming ability. Second, it's useful for the students to have a single task environment for all of the agents they program. A solution to both issues lies in a distributed system where the agents are clients communicating with a server that handles a configurable task environment. This allows the students to program their agents in any language and on any platform they desire, so long as they can communicate with the task environment server. If the task environment can be configured to provide additional levels of complexity and difficulty, this allows students to program at a level they are comfortable with. They can then challenge themselves by incorporating more advanced capabilities into their agents. This paper presents just such a distributed and configurable task environment that was developed for an undergraduate AI course."
  },
  {
    "title": "Validation of the Programming Emotions Questionnaire",
    "abstract": "This overarching study aims to establish the validity of the Programming Emotions Questionnaire (PEQ). The PEQ is an instrument that could be used for assessing students' emotions in a computer programming class, lab, or test. It is derived from the achievement emotions questionnaire (AEQ) that is grounded in the control-value theory of achievement emotions. Since AEQ has numerous psychometric challenges (e.g., some items are not atomic), we make significant changes to revise it, hence, we will be validating the questionnaire from scratch. In this poster we discuss the preliminary findings of our validation study, specifically, findings from the content validity phase. For content validity, we had discussions with psychometric experts and computer science experts. We also present findings of a pilot study of the target population, that is, CS1 students. The result of content validity suggests that there is a need to develop the PEQ that significantly modifies the AEQ. The immediate next steps include conducting steps to ensure construct and criterion validity, and its reliability."
  },
  {
    "title": "Teaching design and project management with lego RCX robots",
    "abstract": "In traditional CS 1 classes students may not develop an appreciation for the planning process in software development. Current IDEs provide such immediate feedback that students can complete courses without an appreciation for the need to plan in advance and design thoughtfully. The course unit described here took time out from a Java-based CS 1 course to give students practical experience in programming a small robot in a highly restricted setting. Outcomes are described in detail. They are based on instructor's notes, and on analysis of both videotaped student demonstrations and student summative essays."
  },
  {
    "title": "CS 0: Culture and Coding",
    "abstract": "In 2018, Colorado State University redesigned their CS-0 course to become a general education requirement for the university within Arts and Humanities, and a guaranteed transfer course across the state for a similar category in other universities. The first CS course in the State to be accepted as a GT-Pathway course. This redesign had to be carefully done due to a need to introduce liberal arts style topics such as CS History, Philosophy and Ethics and Inclusive Design issues, while maintaining current coding and student success standards that were already expected for the CS-0 at the university. We termed this combination as Culture and Coding. In order to add more without reducing retention, the course was redesigned around the Psychology of Learning and spacing of topics in a \"Spiral\" Manner. Each topic was briefly introduced, and throughout the semester, students would dive deeper into the topics. This allowed for a 50% reduction of time focused on teaching coding topics, with students performing equivalent on exams compared to previous models of the course that focused 100% of the time on coding topics. Furthermore, students taught by the spiral teaching method outperformed students taught using traditional methods in the follow-on course. Our evaluation suggests that the spiral model of teaching computer science may allow for greater retention of topics, allowing classes to either cover additional concepts or go more in depth on current topics."
  },
  {
    "title": "Broadening Participation in Computer Science: Key Strategies from International Findings",
    "abstract": "This special session is based around key findings of a Barbara Cail STEM Fellowship that aims to inform key stakeholders about international best practices for broadening participation and diversity in computer science. This special session provides opportunities for the audience to contribute to this research discussion and to analyse and develop strategies for their own unique contexts, in a facilitated approach using the benchmark framework and key findings."
  },
  {
    "title": "Extending a marking tool with simple support for testing",
    "abstract": "Oto is a customizable and extensible marking tool which aims at providing timely feedback to students. Based on simple test cases description formats, Oto also includes operations that help students easily test-even \"mark\"-their own programs."
  },
  {
    "title": "Reaching for \"All\":: Understanding the Challenges and Needs of Schools Lagging in CS for All Efforts",
    "abstract": "Over the last decade, substantial strides have been made in the CS for All movement, with the widespread the enactment of policies that promote the implementation of CS education in K-12 schools. Despite this progress, at the current rate of growth, it is estimated that it will take four decades to actually reach CS for all students. This sobering finding highlights the urgent need to understand why so many schools are lagging in implementation, and to identify solutions that could address this gap. Using school-level survey data and administrative school records, we investigate the barriers to scaling up CS education in New York City. Common to many school reform initiatives, some schools were early adopters and eagerly embraced the call to provide CS to all students. Others, despite years of effort and support, have yet to offer CS or serve a small percentage of their enrollment. Our findings suggest that while \"normative'' perceptions of CS (e.g., beliefs about it's value) are similar among lower- and higher-implementing schools, some \"technical'' challenges-such as lacking an implementation plan and shared school-wide vision for CS-and \"political'' challenges-such as the lack of support from administrators, are greater for schools struggling to offer CS. Though these findings focus on one district, they are relevant to the many others engaged in CS for all efforts. This study builds on previous research by shedding light on the distinct challenges and needs of \"lagging'' schools, and provides insight into effective strategies for bringing CS education to all."
  },
  {
    "title": "Never too early to begin: computer science for high-school students",
    "abstract": "Computer science and technology innovated over the past sixty years, have revolutionized science, the economy and societal interactions. Inherently CS constitutes a new science combining mathematics, logic, information theory and electronics, on par with physics, chemistry and the life sciences. It is appropriate to educate students in the fundamentals of this science. The curriculum should emphasize the scientific content rather than provide mere training in some programming language."
  },
  {
    "title": "Novices' perceptions and experiences of a mobile social learning environment for learning of programming",
    "abstract": "In this paper we report programming novices' perceptions and experiences of a Mobile Social Learning Environment (MSLE) designed to support the learning of programming through enabling increased novice-to-novice interactions. By capturing and analysing such interactions early it is hoped that instructors may identify misunderstandings and misconceptions of novice programmers, and provide timely feedback to alleviate novices' misunderstandings. The MSLE incorporates the use of mobile devices as well as the access to dedicated social networking sites. Novices from three different universities, each with different modes of delivery, participated in this research. Novices' perceived advantages of the MSLE include among other things instant access to discussions, increased interactions, instant feedback in a student-student context, and the ability to share ideas and views anytime, anywhere. Novices have experienced increased interactions among themselves and improved engagement with learning in the MSLE. Novices were able to form learning communities and able to share knowledge and ideas about programming language with each other. Some novices were able to provide assistance to others, hence indirectly, strengthening their own knowledge of programming. The cost of mobile devices and Internet charges on the other hand were perceived as disadvantages of a MSLE. Small screens, lack of programming applications for smart phones, laptops' battery life and distractions from other internet media were some of negative experiences observed by novices who used the MSLE."
  },
  {
    "title": "eL-CID: communicating iterative program design",
    "abstract": "2. ITERATIVE DEVELOPMENT Iterative development is a methodology that is gaining in importance and popularity in the computing industry. It relies on ‘lightweight’ processes and a model of development based on many successive iterations [1]. But because of its progressive nature, teachers find difficult to explain it and split it into simple, bite-size exercises. In other words, iterative development is only taught using a constructivist approach."
  },
  {
    "title": "Fostering and assessing communication skills in the computer science context",
    "abstract": "In accord with a college-wide assessment program at the author's institution, a required major course approximately midway through a student's college career forms the matrix for an intensive project which both develops and evaluates the student's communication skills in discipline-specific ways. For Computer Science majors, the project is a component of a junior-level Advanced Object-Oriented Programming course. Though centered about a semester-long programming project, it involves expectations, guidance, and feedback beyond what is traditional. This assessment instrument has a minimal impact on class time and course content, substantial impact on faculty and student effort, and tremendous impact on learning."
  },
  {
    "title": "Pensieve: Feedback on Coding Process for Novices",
    "abstract": "In large undergraduate computer science classrooms, student learning on assignments is often gauged only by the work on their final solution, not by their programming process. As a consequence, teachers are unable to give detailed feedback on how students implement programming methodology, and novice students often lack a metacognitive understanding of how they learn. We introduce Pensieve as a drag-and-drop, open-source tool that organizes snapshots of student code as they progress through an assignment. The tool is designed to encourage sit-down conversations between student and teacher about the programming process. The easy visualization of code evolution over time facilitates the discussion of intermediate work and progress towards learning goals, both of which would otherwise be unapparent from a single final submission. This paper discusses the pedagogical foundations and technical details of Pensieve and describes results from a particular 207-student classroom deployment, suggesting that the tool has meaningful impacts on education for both the student and the teacher."
  },
  {
    "title": "A java API for historical ciphers: an object-oriented design project",
    "abstract": "This paper describes a project suitable for a software engineering or object-oriented design course. The project consists of asking students to design an application programming interface (API) for a particular range of applications. An API-design project has several features not always found in application-design projects: It forces students to focus carefully on the distinction between the programming and the user interfaces; it provides a good justification for studying existing APIs as model code; it provides a natural way to divide tasks between different groups of designers/programmers; and, the final product can be used as the basis for programming projects in other courses. In this case the particular project we describe is the design of an API for implementing Historical Cipher algorithms."
  },
  {
    "title": "On the Effect of Question Ordering on Performance and Confidence in Computer Science Examinations",
    "abstract": "Most computer science examinations tend to start with the easiest questions and progress towards the more difficult material. Whether this is because of the highly scaffolded nature of the course, an attempt to 'ease students in', or simply by convention, is unclear. However, there is a great deal of data from the psychology literature to suggest that human perception of the difficulty or discomfort of a task is disproportionately affected by the last part of the task completed. Therefore, is it possible that by structuring our exams in an easy-to-hard fashion, we are causing students to perceive the test as more difficult than it actually is? Could changing the question order allow us to change students' perception of their own achievement? What effect could this have on actual performance? This paper attempts to answer these questions by randomly assigning students to write exams ordered either easy-to-hard (referred as 'Easy-Difficult') or hard-to-easy ('Difficult-Easy), then ask them to predict their marks on per-question basis. We find that the question ordering has a small but not statistically significant effect on the performance, and virtually no effect on predicted marks when treating the entire class as one unstratified sample. However, the effect was significant for certain subgroups created via stratification. In particular, swapping the order of the questions may have hurt the performance of international students, but significantly raised both the performance and confidence of female students."
  },
  {
    "title": "The Relationship of Gender, Experiential, and Psychological Factors to Achievement in Computer Science",
    "abstract": "Computer science (CS) is widely recognized as a field with a significant gender gap despite the growing prevalence of computing. Several factors including CS attitudes, exposure to CS, experience with computer programming, and confidence in using computers are understood to be correlated with the low participation of women in CS. These factors also play an important role in students' interest in CS careers and are particularly crucial during secondary school. However, there is a dearth of research that examines differences in how these factors are inter-correlated for younger students (ages 11-13). The purpose of this study was to generate and test a statistical model that demonstrates the inter-correlation amongst these factors with respect to gender. A total of 260 middle school students participated in this study. Four instruments measuring students' CS attitudes, confidence in using computers, CS conceptual understanding, and prior experience with CS-related activities were used. Structural equation modeling was utilized to test the hypothesized model. The findings showed that previous participation in CS-related activities had a significant direct effect on CS attitudes and confidence in using computers, but the effect on students' CS conceptual understanding was indirect. We also found that in a female specific model, previous participation had a significantly stronger direct effect on CS attitudes compared to its effect in a male specific model. The importance of providing more CS-related experience, especially to female students, as well as suggestions on activities that promote gender equity in the field are discussed."
  },
  {
    "title": "Integrating logic programming into a data base course: views as rules in deductive relational data bases",
    "abstract": "LOGIC PROGRAMMING INTO A DATA BASE COURSE: RULES IN DEDUCTIVE RELATIONAL DATA BASES Dr. Yuksel UCKAN Department of Systems Analysis Miami University Oxford, This paper describes an approach adopted in introducing logic-based data base management and deductive data base systems into an undergraduate data base course, The fundamental concepts and terminology for deductive data base systems are briefly discussed. A conventional relational data base manage ment system (DBMS) has some intrinsic deductive capabilities. These capabilities can be exploited effectively by defining and implementing deductive axioms as views, A variety of deductive axioms including those with negated formulas and those corresponding to integrity constraints are implemented as SQL views. This approach provides students with an instructional tool based, on a conventional DBMS, and enables them to appreciate various as pects of deductive data base systems, as well as pros and cons of using a conventional DBMS as a deductive DBMS."
  },
  {
    "title": "Removing the Notional Machine Discrepancy (Doctoral Consortium)",
    "abstract": "A notional machine of a programming language is an abstraction that explains how programs in the language execute. I argue that when novices learn to program, there is a problematic discrepancy between the presented notional machine of the part of the language that they have seen and a notional machine of the whole language. This discrepancy can be removed by creating different languages that gradually change to the complete language. I am creating a Programming Education Runtime System that allows to modularly combine programming language constructs to create these gradual languages. As a next step, evaluation of the use of these gradual languages will be carried out."
  },
  {
    "title": "We Need to Talk!! – A Chatroom Application Using a Student-Designed Protocol",
    "abstract": "This poster describes an assignment for a computer networks class in which students design and implement an application-layer protocol for a chatroom using a client-server architecture running over TCP-IP. Working collaboratively, students design a single protocol that will be implemented by all class members. The protocol is written in a style based on that used in a Request for Comments (RFC), the international standard for describing networking protocols. Students work in pairs to implement the protocol using a programming technology of their choice. This experience helps students to understand that different applications can communicate when they are all designed according to the same RFC specification."
  },
  {
    "title": "The CS Concept Inventory Quiz Show",
    "abstract": "This session is a chance for researchers studying concept inventories (CIs)--low-cost assessments highlighting student misconceptions in a field--and CS education practitioners to communicate about advances in concept inventories in an engaging and utterly ridiculous way. We use a \"quiz show\" format to present CI items from various authors' work across the computing curriculum. On each question, audience members and volunteer contestants consider their own response and guess students' common responses. Then, they see how authentic student data illustrate the misconceptions these items probe. The session's goal is three-fold: educate practitioners about recent results in concept inventory research that may suggest surprising trends in student learning, popularize concept inventories as a tool in research and practice, and collect the audience's expert responses to concept inventory items."
  },
  {
    "title": "Kinesthetic learning of computing via \"off-beat\" activities",
    "abstract": "To broaden participation in computing requires exposing students to a variety of experiences. CS Unplugged promotes learning through kinesthetic activities. This paper identifies three types of learning (1) problem solving, (2) creative construction, and (3) open-ended invention, that lend themselves to activities that engage middle school students in physical movement to learn computing. Via surveys and a personality traits activity \"True Colors\" we examined whether self-identified personality types were predisposed to particular kinesthetic learning activities. Our results suggest that personality type as defined by True Colors does not predict selection of an activity type. Furthermore, the students in our summer Interactive Journalism Institute were significantly more predisposed to pick open-ended invention. These results suggest directions in which K-12 computing curriculum should take to reach the broadest constituency."
  },
  {
    "title": "Interactive computing in a project-oriented file organization course",
    "abstract": "In the decade since Curriculum '68 [1], the suggested structure of courses related to data management has evolved, as evidenced by the report of the ACM committee on curriculum in 1977 [2] and also noted by Dale [3]. A course in Curriculum '68 entitled “Information Organization and Retrieval” [IOR] does not appear in the 1977 report, while a new course in \"File Processing [FP] is included. Influenced by Curriculum '68, N.C. State in 1970 instituted a senior-level course entitled “Information Retrieval” to correspond essentially to the IOR course. Over the years that course in information retrieval has changed gradually, as material related to document retrieval has been supplanted by material related to file organization. Although the title has remained constant, the content is now more similar to FP than IOR. This paper describes the current project-oriented course in information retrieval which stresses the importance of query languages in an information retrieval system. In addition, the paper highlights the use and impact of interactive computing, the choice of a project implementation language, and the relationship of the course to an individual's transition from student to professional. The paper concludes with a comparison of project grade and the associated computer development time."
  },
  {
    "title": "Web-based tools for active learning in information theory",
    "abstract": "The idea of using web-based technologies in education as a means of interactive learning has been erging for several topics in computer science and engineering. It proves to be more effective in the learning process and hence rapidly expanding. In this paper we introduce an integrated environment for active learning in the information theory course and related fields. Our environment is designed to meet the learning preferences of computer engineering learners. The environment integrates several different materials to support the learners' preferred style. It includes a movie-like welcome component, an animated hyper-text introduction for the basic concepts of information theory, a communication model simulator, and an interactive set of exercises for self assessment. All the components of the environment are integrated into a single interface based on Java2D of Sun Microsysts. Being a Java applet, our environment is portable and web-based enabled, which makes it possible for learners to study at their convenience. An initial study shows that our integrated environment is a useful tool for learners of information theory and related fields."
  },
  {
    "title": "How programming environment shapes perception, learning and goals: logo vs. scratch",
    "abstract": "This study compares the attitudinal and learning outcomes of sixth grade students programming in either Logo or Scratch. Given proposed affordances of the visual programming language, Scratch, I hypothesized that those students learning Scratch would demonstrate greater competence in interpreting loops and conditional statements and would have more positive attitudes towards programming. However, differences in performance between the two groups appeared only in the greater ability of the students that learned Scratch to interpret conditional statements. Contrary to our hypothesis, we found that students that learned Logo had on average higher confidence in their ability to program and students were no more likely to plan to continue to program after the course or view the learning of topics as difficult if they learned Logo or Scratch."
  },
  {
    "title": "Using classes early, an object-based approach to using C++ in introductory courses (seminar)",
    "abstract": "In the heyday of structured programming, many educators debated the sequencing of topics in introductory courses, particularly the introduction of functions and procedures. As object-oriented programming gains a foothold, particularly via the languages C++ and Java, the debate moves from the introduction of functions to the introduction of classes. To keep the discussion in the form of a debate, this seminar will focus on the issue:Resolved: classes should be used early in the introductory sequence of courses.Classes should be used early in introductory programming courses when a program or application warrants their use, not because classes are intrinsically a good thing. Rather than demanding that students use a class to convert a Fahrenheit temperature to Celsius, we must show students examples that use classes; examples that leverage the power of classes into programs that would be more difficult to do without the use of classes.In many cases, classes can be used as units or modules have been used with structured languages. Students and educators can become accustomed to the syntax of C++ and the concepts of object-based and object-oriented programming by using classes for fundamental language constructs such as strings and vectors, and for application-specific programs as well. Classes are used first, then modified, and finally (if ever) written from scratch. With this approach students learn about good coding and design from experience. For this approach to using classes to be effective, a library of well-designed and useful classes must be available to instructors and students."
  },
  {
    "title": "Nifty assignment",
    "abstract": "Introduction I can worry about the strategy of my syllabus, and I can fret over my lectures. Nonetheless, I am always struck that what my students really learn and enjoy in the course depends very much on the assignments. Great assignments are hard to dream up and time-consuming to develop. With that in mind, the Nifty Assignments session is all about promoting and sharing the ideas and concrete materials of successful assignments"
  },
  {
    "title": "CSTutor: a pen-based tutor for data structure visualization",
    "abstract": "We present CSTutor, a sketch-based interface designed to help students understand data structures. It currently supports Linked Lists, Binary Search Trees, AVL Trees, and Heaps, and creates an environment in which a user's sketched diagram and code are combined seamlessly. In each of the data structure modes, the user can naturally sketch a data structure on the canvas just as they would on the white board. CSTutor analyzes the user's diagrams in real time, and automatically generates code in a separate code view to reflect any changes the user has made. Additionally, the code can also be edited and any new code changes animate the data structure drawn on the canvas. The connection between the data structure drawn on the canvas and the code implementation is intended to bridge the gap between the conceptual diagram of a data structure and the actual implementation. We also present the results of a perceived usefulness survey. The results of the study indicate that the majority of students would find CSTutor helpful for learning data structures."
  },
  {
    "title": "Teaching Distributed Computing Fundamentals using Raspberry Pi Clusters",
    "abstract": "The 2019 ABET computer science criteria requires that all computing students learn parallel and distributed computing (PDC) as undergraduates, and CS2013 recommends at least fifteen hours of PDC in the undergraduate curriculum. Consequently, many educators are looking for easy ways to integrate PDC into courses at their institutions. This hands-on workshop introduces Message Passing Interface (MPI) basics in Python or C/C++ using clusters of Raspberry Pi single-board computers. MPI is a multi-language, platform independent, industry-standard library for PDC. Raspberry Pis are an inexpensive and engaging hardware platform for studying PDC as early as CS1. Participants will experience how to teach distributed computing essentials with MPI by means of reusable, effective \"parallel patterns,\" including single program multiple data (SPMD) execution, send-receive message passing, and parallel loop patterns. No prior experience with MPI, PDC, or the Raspberry Pi is expected; participants will explore short programs designed to help students understand MPI basics, plus longer \"exemplar\" programs that use MPI to solve significant applied problems. The workshop includes: (i) personal experience with the Raspberry Pi (clusters provided); (ii) instructions on how to deploy Raspberry Pi clusters quickly in the classroom; (iii) self-paced hands-on experimentation with MPI programs; and (iv) a discussion of how to use Raspberry Pi clusters to align courses with CS2013 and ABET. All materials from this workshop are available from CSinParallel.org; participants should bring a laptop to access materials and connect to the Raspberry Pi clusters."
  },
  {
    "title": "A Family of Instruments to Measure Data Science Attitudes",
    "abstract": "Attitudes play an important role in students' academic achievement and retention, yet quality tools to measure them are not readily available in the new field of data science. Through funding from the National Science Foundation, we are developing a family of instruments that measure attitudes toward data science in the context of an introductory, college-level course. This poster will showcase preliminary results discussing pilot instruments to assess instructors' attitudes toward teaching data science and an inventory which captures classroom characteristics. These instruments, based on Expectancy-Value Theory, will enable data science education researchers to evaluate pedagogical innovations and measure instructional effectiveness relating to student attitudes. We invite instructors of data science courses to join in this discussion and to use these instruments for their own data science education research projects."
  },
  {
    "title": "Global Perspectives on Assessing Educational Performance and Quality",
    "abstract": "Educational performance indicators are being considered or implemented in different ways by institutions and governments in different countries. What impact is this likely to have on computing education?"
  },
  {
    "title": "Process oriented guided inquiry learning (POGIL) for computer science",
    "abstract": "This paper describes an ongoing project to develop activities for computer science (CS) using process oriented guided inquiry learning (POGIL). First, it reviews relevant background on effective learning and POGIL, compares POGIL to other forms of active learning, and describes the potential of POGIL for CS. Second, it describes a sample POGIL activity, including the structure and contents, student and facilitator actions during the activity, and how activities are designed. Third, it summarizes current progress and plans for a NSF TUES project to development POGIL materials for CS. Finally, it discusses student feedback and future directions."
  },
  {
    "title": "Towards a conceptualization of pedagogical content knowledge for computer science",
    "abstract": "ccording to the current state of research, it seems uncontroversial that the Pedagogical Content Knowledge (PCK) of teachers is a crucial factor for the success of teaching and learning in the context of many school subjects. Yet, the research about PCK in the subject of computer science (CS) is still sparse. Thus, we are working on a conceptualization of PCK for computer science (CS) that is based on literature on the one hand and empirically validated on the other. As a first step towards this goal, we have developed a category system from a set of publications from general pedagogy as well as from educational research in other subjects. Additionally, we have compared this system with the outcomes of a former survey among teachers about the preparation of lessons. Currently, we are coding all curricula for teacher education in Germany with this category system and preparing interviews among experts, applying the Critical Incident Technique."
  },
  {
    "title": "Mentoring, AI, and the End of Affirmative Action: Connecting with SIGCSE Reads",
    "abstract": "This Birds of a Feather will begin with a high-level overview of the SIGCSE Reads 2024 books and then quickly move to discussion about mentoring students in the era of large language models and ChatGPT, including how students may value the curriculum differently, how learning outcomes may change, and how we can support students and alumni/ae as they work with rapidly changing job and learning expectations. We expect that many of the sessions at SIGCSE will address the radical shifts in learning outcomes and curricular changes due to LLMs. We will not focus on the particulars of these changes, but rather on mentoring in this time with Sister Resisters: Mentoring Black Women on Campus by Janie Victoria Ward and Tracy L. Robinson-Wood as a resource. How do we guide our students through the curriculum upheaval triggered by shifting learning outcomes? How do we help them prepare for the new instantiation of computer science? This BOF is the primary session for SIGCSE Reads. We encourage discussion of this year's fiction works The Lifecycle of Software Objects by Ted Chiang and \"Dolly\" by Elizabeth Bear, as well as past Reads, throughout the conference."
  },
  {
    "title": "Authentic object modeling in the early computer science curriculum using objektgraph",
    "abstract": "The most fundamental concepts of CS involve modeling: represent some aspect of the world in a suitable model, manipulate the model to reason about the world, transform the model instance to reflect events in the world, and interpret the model to determine its meaning. An authentic object-oriented model derives meaning from associations, not only attributes. Unfortunately, authentic object-oriented modeling is not employed early, if employed at all, perhaps because of limited language support for associations. The proposed curriculum and tool bring authentic object-oriented modeling and implementation to the front of the curriculum, often the first experience. By completion of the curricular unit, the student will have developed sophisticated applications with graphical user interfaces, and will come to value, be motivated toward, and have a context in which to place, subsequent object-oriented topics in a curriculum."
  },
  {
    "title": "A communication library to support concurrent programming courses",
    "abstract": "A number of communication libraries have been written to support concurrent programming. For a variety of reasons, these libraries generally are not well-suited for use in undergraduate courses. We have written a communication library uniquely tailored to an academic environment. The library provides two levels of communication abstraction (topology and channel) and supports communication among threads, processes on the same machine, and processes on different machines, via a unified interface. The routines facilitate controlled message loss along channels and can be integrated with an existing graphical tool that supports visualization of the communication that occurs. An editor has been developed for automatic code generation for arbitrary topologies via a graphical interface. All these tools run over Solaris, Linux, and Windows."
  },
  {
    "title": "Experience with an analytic approach to teaching programming languages",
    "abstract": "Through the use of interpreters it is possible to teach programming languages in an analytic way without the mathematical overhead associated with other formal methods. This is a natural evolution of programming language pedagogy from present approaches that are largely descriptive. As a bonus, students receive training in the use of meta-linguistic abstraction in program design. An example of this approach is presented along with suggested variations and discussion of a number of practical considerations that may be crucial to success in the classroom."
  },
  {
    "title": "A visual and interactive automata theory course with JFLAP 4.0",
    "abstract": "We describe the instructional software JFLAP 4.0 and how it can be used to provide a hands-on formal languages and automata theory course. JFLAP 4.0 doubles the number of chapters worth of material from JFLAP 3.1, now covering topics from eleven of thirteen chapters for a semester course. JFLAP 4.0 has easier interactive approaches to previous topics and covers many new topics including three parsing algorithms, multi-tape Turing machines, L-systems, and grammar transformations."
  },
  {
    "title": "Intro to CS for Educators: A Pre-Curricula PD Workshop",
    "abstract": "Many K-12 educators who are new to computer science (CS) may have a lack of confidence or sense of intimidation when starting their CS teaching journey. To mitigate this, Massachusetts DESE contracted CSforMA to create a three-day \"Introduction to Computer Science for Educators\" workshop (ICSW) focused on CS fundamentals. The ICSW covered grade-level CS terminology and concepts including computational thinking, physical computing, and programming. Evaluation of the ICSW showed 98% of respondents reported increased knowledge of CS. In a survey administered later that summer, 100% of respondents who took the ICSW reported that it helped them better understand curriculum materials. This replicable, scalable, and successful ICSW model could benefit other State DoEs and CS professional development coordinators. This work also shows the benefits of using an external evaluator."
  },
  {
    "title": "Tools, Languages, and Environments Used in Primary and Secondary Computing Education",
    "abstract": "With the advent of teaching primary and secondary computing education, tools, languages, and environments (TLEs) are important pedagogical support systems for students and teachers. While there are a number of resources available for teaching K-12 students and teachers, there is little synthesis of the data with respect to usage and adoption rates for various TLEs. Using data extracted from 510 articles related to K-12 education, we conducted an analysis using descriptive statistics to determine what TLEs in K-12 are most frequently studied by researchers. We found 193 TLEs being used in research studies and experience reports, then differentiate between these two types of data and between students and teacher professional development. This preliminary research provides a first descriptive analysis of TLEs being used in K-12 space and simultaneously sets the stage for creating a classification system for TLEs based on the literature, including how they are used and what topics (in or outside of computing education) they are used to teach."
  },
  {
    "title": "Comparison of Role-Assigned Grouping with Free-Form Group Activities in an Introductory Computer Science Course",
    "abstract": "We investigated the impact of assigning specific roles in Process Oriented Guided Inquiry Learning (POGIL) activities versus giving the same group activities without pre-assigned roles. We hoped to show that the group with additional structure would receive tangible benefits: more engagement with partners, greater comprehension of material, heightened content interest, and increased retention. Preliminary results suggest that the proportion of minimally participating students was not statistically significantly different, and neither were the individual assessments. The roled section did have higher scores overall in the course, both in the group activities and also in the final exam; however, the difference was small and not clearly statistically significant. Unexpectedly, disciplinary actions and post course surveys indicate a greater rate of plagiarism on both shared lab reports and individual homework assignments in the free-form group and this may be a factor for instructors to bear in mind when utilizing group activities."
  },
  {
    "title": "Evaluation of automatic classroom capture for computer science education",
    "abstract": "Our research into automatic recording of the complete classroom experience has led to the development of many software systems, one of which captures an image stream of all content presented on a computer. We have just completed a first deployment of this computer capture system in which 3 separate courses were recorded for an entire semester with the content being presented to students within 24 hours of the class meeting time. This system has been envisioned as a component of a complete lecture capture system but a component with real value even when used as a stand alone. In this paper we discuss student feedback to this computer capture system, revision of system functionality, and thoughts on the usefulness of capturing computer content in computer science courses in general."
  },
  {
    "title": "Designing Integrated Math + CT Activities to Promote Sensemaking about Place Value in Grades K-2",
    "abstract": "In recent years, there has been a growing emphasis on using computational thinking (CT) to teach mathematical concepts. The integration of math+CT enables students to gain a deeper understanding of both mathematical and computer science (CS) concepts. Although numerous professional development programs provide teachers with a solid understanding of CT and methods for integrating it into the curriculum, there has been little research on how teachers apply this knowledge to the design and development of math+CT activities. Moreover, the majority of integrated activities are concentrated in the upper elementary grades, while the early grades (i.e., K-2) remain underexplored. The purpose of this study is to describe how teachers translate their CT knowledge in the collaborative design of an integrated math+CT activity focused on number sense and mathematical operations for grades K-2. Research faculty from the CS and Teacher Education departments designed block-based programming activities for K-2 students to explore and make sense of place value representations of the numbers 1 - 1000. In-service elementary teachers in an online graduate STEM CT course (N = 13) experienced these activities as learners and provided feedback for redesign from their perspectives as classroom teachers. Qualitative analysis of collaborative problem-solving slides and individual reflections revealed how teachers connected their mathematical knowledge for teaching place value to their emergent understanding of CT concepts of abstraction, decomposition, and debugging. This research bridges the gap between enthusiasm for math+CT integration and teacher capacity to use CT to promote creative mathematical thinking and problem-solving in K-2 classrooms."
  },
  {
    "title": "The challenge of human resources staffing and utilization in industrial computing - part 1",
    "abstract": "Marvin Kornbluh\n Industry today is looking for creative systems analysts and programmers who can develop physical systems on the basis of sound business judgement rather than merely increasing the level of sophistication. They need “entrepeneurs” - those who know how to work effectively with hardware and software suppliers, know how to harness and direct the creative systems people, know how to be communications catalysts in giving advice and counsel to systems users, and know how to establish and maintain sensible budgets and project control systems.\n How these types of EDP personnel can be developed by the application of sound management principles to the establishment of “custom-built” educational and training programs that emphasize both the operations of the organization as well as the technical aspects of data processing will be discussed.\n William McCartin\n The nature of computer technology in a manufacturing environment and the resulting demand for extensive computer education and professional knowledge will be outlined. A company's response to this demand as it was influenced by technical and budgetary considerations is described. The current and future educational requirements necessary to successful implementation of computerized industrial applications, manufacturing process control, and factory automation is considered.\n Richard G. Schneider\n Computer-related careers in banking will be discussed. Personnel are needed who can specialize in such areas as computer operations efficiency, hardware performance measurement, systems software support and development, the use of management science techniques, data base development and systems support, and application systems development in programming. They must understand the technical aspects of their fields and communicate effectively to their technical and corporate management, with coordination of all the efforts involved in a large scale, 24 hour, 7 day week operation."
  },
  {
    "title": "CS10K Teachers by 2017?: Try CS1K+ students NOW! Coping with the Largest CS1 Courses in History",
    "abstract": "\"Be careful what you wish for, you just might get it.\" - Proverb In 2005, computing education was experiencing a crisis. Enrollments had \"fallen to such an extent that some academic computing programs were facing significant reductions in staffing levels or even elimination\". The community responded, with panels to investigate and highlight ways to infuse \"passion, beauty, joy and awe\" into the introductory experiences, the CS10K project to bring computing to 10,000 teachers and 100,000 students, and better messaging of career opportunities, to name a few of the initiatives to bring students back into our seats. Well, by golly, it worked! It certainly didn't hurt our cause that Wall Street almost collapsed, young whiz kids were becoming TECH billionaires, an inspiring video and an interactive website led millions of people to code for an hour every December, or smart devices put computing into the hands of young people, and social media became the killer app. Whatever it was, CS became hot again. And we mean HOT. There are now several institutions around the world that have well over a thousand students taking CS1 in the Fall of 2015. There's just so much lemonade one can make before the seams start to burst, and the wheels come off the bus, as many shared at SIGCSE 2015 at the Birds of the Feather session. The goal of this panel is to bring together educators who were charged with delivering face-to-face CS1 on the grandest scale the field has ever seen. How did they cope? Does it become all people management with an army of Teaching Assistants? What were the differences and common themes in their survival plans? What is working? What mistakes were made? How are they supporting differential learning for the students who don't have the same experience as others? How is diversity being affected? Finally, what advice would they have for others interested in venturing into the tsunami, and broaden participation at a massive scale?"
  },
  {
    "title": "Data Protection with SMSD Labware",
    "abstract": "The majority of malicious mobile attacks take advantage of vulnerabilities in mobile applications, such as sensitive data leakage via inadvertent or side channel, unsecured sensitive data storage, data transmission, and many others. Most of these mobile vulnerabilities can be detected in the mobile software testing phase. However, most development teams often have virtually no time to address them due to critical project deadlines. To combat this, the more defect removal filters there are in the software development life cycle, the fewer defects that can lead to vulnerabilities will remain in the software product when it is released. As part of Secure Mobile Software Development (SMSD) project, we are currently developing capacity to address the lack of pedagogical materials and real world learning environment in secure mobile software development through effective, engaging, and investigative approaches. In this session, we provide details of a new implemented module named data protection. We also share our initial experience and feedback on the developed module."
  },
  {
    "title": "Progressive project assignments in computer courses",
    "abstract": "This paper presents a method of design for projects in computer courses that tends to enable all students in the class to achieve their maximum potential. Each project is structured at three progressive levels of difficulty corresponding to three prospective grades A, B, and C. The B-level is an extension of the C-level and the A-level is an extension of the B-level. Each student starts at the C-level and progresses as far as possible and is scored accordingly."
  },
  {
    "title": "Do Students Read Instructor Emails? A Case Study of Intervention Email Open Rates",
    "abstract": "Email is an important mode of communication because it scales to the largest computing courses and is institutionally supported. Furthermore, regular email communication from instructors has been shown to help set student expectations and encourage participation. As a result, effective email can contribute to emotional engagement, which has been linked to improvements in performance and retention, the latter being a persistent problem in computer science. However, we lack a clear picture of how computing students interact with emails and whether their use aligns with instructors’ expectations. This paper addresses this gap by presenting data on how often CS1 students open instructor emails. We present email engagement data throughout the term for a particular type of email that prompts students to plan to start their homework. Contrary to instructors’ expectations, the rate at which students open emails of this kind does not change significantly over the term. Many students who engage with the emails do so consistently, even after repeated emails throughout the term. The patterns we found illustrate the value of collecting this type of data and informing instructors and researchers about who reads these messages and how often they actually reach students."
  },
  {
    "title": "Iambic IBM AI: the palindrome discovery AI project",
    "abstract": "In this paper, I describe an AI laboratory assignment in which students implement standard search techniques and explore heuristic measures of their own design for a palindrome discovery system. The system successfully derives palindromic sequences of words, many of which are meaningful, and achieves what is to the author's knowledge the first automatic generation of palindromes. Code is made available to students which implements the state space for palindrome search. This makes a large-scale problem accessible to introductory AI students by harnessing their knowledge of natural language. Students were motivated by the intrigue of discovering new palindromes."
  },
  {
    "title": "Data jam: introducing high school students to data science",
    "abstract": "At the present, there is a significant lack of programs or resources at the high school level to prepare students for a data driven future. Data Jam is a high school outreach program, that introduces students to data science. The program is organized by members of academia (Carnegie Mellon University, University of Pittsburgh) and industry and research (IBM, Teradata, Pittsburgh Computing Center). Over a period of four months (Oct-Feb of the school year), teachers and students explore the concepts of data science and big data via workshops, exercises, a field trip, and a team project. Data Jam is currently in its fifth year. Participation has grown from an initial pool of seven teams to twenty-five teams last year. Based on teacher and student feedback, we are pleased with the program's success. This poster discusses the goals and structure of Data Jam, its execution, participant feedback, and lessons learned."
  },
  {
    "title": "Characteristics and dimensions of a competence model of theoretical computer science in secondary education",
    "abstract": "Guiding theme of the ongoing reformation movement of the education system in Germany catalyzed by the OECD Programme for International Student Assessment is standardization. Educational standards are developed for all grades of school up to university level with a focus on the core subjects, reading, mathematics and scientific literacy [1]. Starting basis for the elaboration of standards are competence models, where competence is conceived according to Weinert [2] as \"a roughly specialized system of abilities, proficiencies, or individual dispositions to learn something successfully, to do something successfully, or to reach a specific goal.\" As for computer science education, most of the existing approaches to competence models are of pragmatical nature, based on years of teaching experience. Although plausible and well thought out most of these models neither are concerted nor verified. This research work introduces a methodology of constructing a competence model from exercise characteristics by means of empirical statistical analysis. Exemplified by theoretical computer science in secondary education, it is exposed how hypotheses on the dimensional structure of a competence model are theoretically founded and empirically verified.\n The proceeding roughly breaks down into five steps. First step is the identification and classification of the characterizing attributes of task difficulty. \"Characteristics\" may be the closeness to the student?s realm of experience, the level of abstraction or complexity of the content, the level of formalization or redundancy of the task setting, or the level of cognitive process. Second step is the generation of hypotheses on the dimensional structure of a competence model, based on classification of the characteristics. For this purpose, the attributes are bundled to theoretically homogeneous groups according to criteria like \"concerning the task setting, the curricular content or the learner activity\". It is postulated that each competence dimension is composed of one group of characteristics, just as spectral colors are combined from primary colors. Step three is the implementation of an empirical study to gather empirical data on students? abilities along the characteristics. Step four is a statistical data analysis in order to verify the dimensional structure. Factor analysis appears to be an appropriate statistical technique for analyzing the correlations between the characteristics and bundle them to a small number of underlying dimensions, called factors. Since a factor shows, e.g., large correlation with the characteristic level of formalization and medium correlation with the characteristic redundancy of the task setting, it may be interpreted as their common factor, describing the portion of task difficulty emerging from the task setting. As step five it is proposed to cluster the competence profiles, referring to the factors. Typical competence profiles resulting from cluster analysis may be expressed in terms of characteristics to provide an individual competence diagnosis that is both meaningful and comprehensible. The following two examples are profiles of minimum and maximum competence level, to be fulfilled by every student (a) and to be attained only by high performing students (b) respectively: (a) The learners model a course of action close to their realm of experience (e.g., traffic lights) by using automata. If textually specified, algorithms are recalled and properly applied. (b) The learners model a problem beyond their experience (e.g., syntax check of arithmetic expressions) by using automata. Even if formally specified, problems are analyzed and appropriate algorithms are created."
  },
  {
    "title": "First Bytes: Preparing K-12 Educators for CS Inclusion",
    "abstract": "In 2016, Former U.S. President Obama started a Computer Science For All initiative [1] and in Europe it is the Informatics For All initiative [2]. In 2020, many school systems are still trying to figure out how to meet the learning requirements of bringing Computer Science (CS) into every primary and secondary classroom. As state department of education offices throughout the United States are trying to support the initiative and have started adding CS requirements to standardized testing, the lack of professional development (PD) for educators has been forgotten. How does a physical education teacher, a special education teacher, a foreign language teacher, and a history teacher bring CS concepts into their classrooms? This immediately caused a high demand for Computer Science (CS) professional development for primary and secondary teachers. Some school systems did not even fully understand what CS was, so they were unable to identify PD needs, evaluate PD options, or track their educator's inclusion of it. Over the past two years, I have conducted Computer Science PD sessions for educators in three formats (one year of weekend sessions, one year mentoring through computer clubs, and one year undergraduate CS courses) of with varying lengths of commitment by the participants, who came from different backgrounds. Participants were from the K-12 areas of Math, Technology Education, English, Special education, and English Language Learners. A side-by-side comparison of these sessions based on different categories such as targeted grade level, workshop durations, prior educator knowledge area, curriculum development information, training tools, and lessons learned will be provided in this poster. The sessions were structured using participatory design [3] and traditional college undergraduate online course work. Initial pilot results were collected through a survey prior to receiving the PD. These early results show that K-12 teachers in non-career and technical classrooms believe that CS is just programming or do not know how to apply CS concepts to their subject matter. The results further show that many of the K-12 teachers felt that the majority of existing PD simply provided lesson plans [4] versus teaching them CS competencies to allow them the creativity to develop their own lesson plans and to support their students CS questions. In a few cases, for example pilot participants were surprised to learn that CS does not always include programming. We are currently using conjecture maps [5] and data sorting to process and analyze the data from our three formats. The conjecture mapping will aid in seeing where we can improve to ensure that K-12 teachers in our service area are comfortable with CS topic inclusion. We will also be able to duplicate a successful approach for cybersecurity topics in the future, as that is now also being added by stated department of education boards within the United States."
  },
  {
    "title": "The case for computer scientists teaching computer science or digit-alice in squanderland",
    "abstract": "It has been said that war is to o important to leave to soldiers, and politics to o important to leave to politicians. So als o think some is the teaching of computer scienc e too important to leave to computer scientists. The proliferation of applications-oriented introductory computer science courses taught in othe r departments, rivals the proliferation of \"out-house\" statistics courses in the 1940-I965 era. In this paper an introductory course i n computer science will be defined as any cours e involving computer programming for which ther e is no prerequisite course in computer science. Table I lists introductory-level compute r science courses currently taught at the University of Western Ontario (total enrolment : 20,000) ; 60 percent of the students are taugh t by the Computer Science Department. Missin g from the table is a course, presently propose d by the Chemistry Department. The author has no reason to believ e that proliferation has been extreme at thi s university ; rather, it appears to be typica l of that experienced by publicly supported , full-service universities. The degree of centralization of th e teaching of computer science appears to var y among universities. In talking to some computer science educators one gathers the opinio n that progress is perceived to lie in th e direction of divestment by the department o f \"service courses\". The high course numbers assigned t o introductory computer science courses taugh t within the \"softer\" disciplines suggest s that course numbers may correlate inversel y with student I .Q. . This might be an interesting problem on which social scientist s could hone newly acquired computational skills. In one sense the proliferation of compute r science courses is more malignant than was th e metastasis of statistics : faculties and departments teaching computer science frequently set u p their own computer centres. And they cost mone y to build and operate. Table II lists the various computers a t work in and around this university. The total computing power adds up to about half that use d by Canada's second largest life insurance company . There is reason to suspect that th e machines are not equally loaded. There are both good and had feature s associated with the replication of facilities fo r teaching computer science. It creates jobs fo r teachers, programmers, and centre directors, mos t of which …"
  },
  {
    "title": "A software testbed for advanced projects in real-time and distributed computing",
    "abstract": "The person in the street takes real-time computing for granted, even if he or she does not know that term. Computers may not be trusted by everybody, but the public nevertheless assumes that they are used to control complex processes such as space shuttle motion and automobile carburetion. In practice, real-world applications are very difficult. Some of the computer science issues that must be faced include ‘hard” time deadlines, fault-tolerance, formal specification, verification that a system satisfies its specification, and coordination of distributed computing resources [4]. In addition, there are innumerable complications when attempting to model a physical process. We take the latter as a major reason why real-time computing is often omitted from upperlevel work in undergraduate computer science programs. Few undergraduates have either the computational capability or the opportunity to design and implement a significant real-time process-control application of computing. Yet, given the significance of such problems outside of academia and the recent flurry of research activity in the area of real-time computing (see, for example, [1, 2, 3 and 6]), it is increasingly desirable for our students to encounter computing problems involving real-time constraints, distributed computing and related issues, in advanced courses and/or independent projects. The Trainset simulation presents a substantial process-control problem, namely motion of idealized"
  },
  {
    "title": "Dive into Systems: A Free, Online Textbook for Introducing Computer Systems",
    "abstract": "This paper presents our experiences, motivations, and goals for developing Dive into Systems [17], a new, free, online textbook that introduces computer systems, computer organization, and parallel computing. Our book's topic coverage is designed to give readers a gentle and broad introduction to these important topics. It teaches the fundamentals of computer systems and architecture, introduces skills for writing efficient programs, and provides necessary background to prepare students for advanced study in computer systems topics. Our book assumes only a CS1 background of the reader and is designed to be useful to a range of courses as a primary textbook for courses that introduce computer systems topics or as an auxiliary textbook to provide systems background in other courses. Results of an evaluation from students and faculty at 18 institutions who used a beta release of our book show overwhelmingly strong support for its coverage of computer systems topics, its readability, and its availability. Chapters are reviewed and edited by external volunteers from the CS education community. Their feedback, as well as that of student and faculty users, is continuously incorporated into its online content. We anticipate releasing version 1.0 of the book in spring of 2021, and a release candidate is currently available at https://diveintosystems.org."
  },
  {
    "title": "Exploring the Differences in Students’ Behavioral Engagement With Quizzes and Its Impact on their Performance in a Flipped CS1 Course",
    "abstract": "There is an increase in the adoption of flipped classroom pedagogy for introductory programming (CS1) courses. In a flipped course, students watch the content videos and complete an accountability quiz before the class, then do active learning activities during the class. The role of students’ behavioral engagement and its impact on learning outcomes is widely studied in education, but little is known about its effect in flipped CS1 courses. This paper analyzes factors related to students’ behavioral engagement with quizzes, such as how much time they spend on quizzes, when they choose to submit the quizzes, and how consistently they space their weekly quiz submissions over a fifteen-week semester. Firstly, group differences based on GPA, gender and prior programming experience (PPE) are explored to understand how behavioral engagement varies among different student populations. Secondly, we analyze the association of behavioral engagement with students’ performance using exam averages. We find that behavioral metrics do not vary based on GPA, PPE, and gender. Further, we find that while the time taken on quizzes and weekly consistency is not correlated with students’ performance, students who submit the quizzes earlier tend to have statistically higher exam averages than those who complete them near the deadlines. These results align with earlier findings and will help instructors understand students’ behavioral approaches to flipped CS1 courses, which can help them tailor their instructions accordingly."
  },
  {
    "title": "Heuristic Evaluation for Novice Programming Systems",
    "abstract": "The past few years has seen a proliferation of novice programming tools. The availability of a large number of systems has made it difficult for many users to choose among them. Even for education researchers, comparing the relative quality of these tools, or judging their respective suitability for a given context, is hard in many instances. For designers of such systems, assessing the respective quality of competing design decisions can be equally difficult. Heuristic evaluation provides a practical method of assessing the quality of alternatives in these situations and of identifying potential problems with existing systems for a given target group or context. Existing sets of heuristics, however, are not specific to the domain of novice programming and thus do not evaluate all aspects of interest to us in this specialised application domain. In this article, we propose a set of heuristics to be used in heuristic evaluations of novice programming systems. These heuristics have the potential to allow a useful assessment of the quality of a given system with lower cost than full formal user studies and greater precision than the use of existing sets of heuristics. The heuristics are described and discussed in detail. We present an evaluation of the effectiveness of the heuristics that suggests that the new set of heuristics provides additional useful information to designers not obtained with existing heuristics sets."
  },
  {
    "title": "Advancing Opportunities for CS Teachers: How To Best Support Professional Development for Experienced Teachers in K-12 CS Education",
    "abstract": "In K-12 education, nearly all efforts focused on expanding computer science education center on the induction of new computer science teachers, with very little attention given to support the ongoing needs of experienced computer science teachers. More seasoned teachers benefit from deepening their content knowledge, pedagogical practices, and knowledge and capacity to provide equitable and inclusive learning experiences that results in students feeling a sense of belonging in computer science. This panel will discuss the needs of experienced CS teachers from a variety of perspectives, including teacher education researchers, professional development leaders, and high school practitioners and teacher facilitators. The panel will collectively outline a research and practice agenda that focuses on supporting, retaining, and further developing experienced teachers through expanded professional development, leadership opportunities, and community for CS teachers."
  },
  {
    "title": "WinRDBI: a Windows-based relational database educational tool",
    "abstract": "RDBI is an educational tool that provides students with the capability to test their understanding of the formal relational query languages (relational algebra, domain relational calculus and tuple relational calculus) and the industry standard query language SQL. Although RDBI is an integral part of the database management courses at a number of universities, it is unavailable to those universities that do not have a license for the software product in which RDBI is implemented. WinRDBI, a version of RDBI for Windows, removes this limitation by increasing the availability of the educational tool to a standard Windows platform. Another advantage of WinRDBI is its graphical user interface, providing the student with a more intuitive interface than the command line interface of RDBI. This paper describes the architecture and user interface of WinRDBI. The features of WinRDBI are also illustrated using nontrivial examples from a popular database text. Although formal relational query languages do not provide inherent support for aggregation, these examples illustrate how to write queries in the formal languages to support (a limited form of) counting and minimum/maximum queries."
  },
  {
    "title": "Evaluating Cybersecurity-Related Competences through Serious Games",
    "abstract": "This thesis looks at ways how to use serious games to evaluate cybersecurity-related competences. Various case studies show how competency-driven design of technical exercises can help to target specific competencies in a scalable manner."
  },
  {
    "title": "The Effects of Formal Undergraduate Research Experiences on Student Aspirations for Graduate Study in Computer Science (Abstract Only): Explaining the Relative Influence of Racial Identity Status",
    "abstract": "This poster explores the differential effects of formal undergraduate research experiences on the graduate degree intentions of underrepresented racial-ethnic minority and racial majority computing majors. Across two studies, it was found that formal undergraduate research experiences in computing have a greater and more positive effect on the educational aspirations of underrepresented racial-ethnic minorities as compared to racial majorities. For underrepresented racial-ethnic minorities, this effect is manifested in the gains in academic and career self-efficacy and gains in knowledge about the graduate admission process they develop as a result of their formal research experience. Together, these findings suggest that psychosocial skills that are strengthened during formal undergraduate research experiences play an important role in influencing the educational intentions of underrepresented racial-ethnic minorities in the field of computer science."
  },
  {
    "title": "Conversing with Copilot: Exploring Prompt Engineering for Solving CS1 Problems Using Natural Language",
    "abstract": "GitHub Copilot is an artificial intelligence tool for automatically generating source code from natural language problem descriptions. Since June 2022, Copilot has officially been available for free to all students as a plug-in to development environments like Visual Studio Code. Prior work exploring OpenAI Codex, the underlying model that powers Copilot, has shown it performs well on typical CS1 problems thus raising concerns about its potential impact on how introductory programming courses are taught. However, little is known about the types of problems for which Copilot does not perform well, or about the natural language interactions that a student might have with Copilot when resolving errors. We explore these questions by evaluating the performance of Copilot on a publicly available dataset of 166 programming problems. We find that it successfully solves around half of these problems on its very first attempt, and that it solves 60% of the remaining problems using only natural language changes to the problem description. We argue that this type of prompt engineering, which we believe will become a standard interaction between human and Copilot when it initially fails, is a potentially useful learning activity that promotes computational thinking skills, and is likely to change the nature of code writing skill development."
  },
  {
    "title": "Identifying Common Errors in Open-Ended Machine Learning Projects",
    "abstract": "Machine learning (ML) is one of the fastest growing subfields in Computer Science, and it is important to identify ways to improve ML education. A key way to do so is by understanding the common errors that students make when writing ML programs, so they can be addressed. Prior work investigating ML errors has focused on an instructor perspective, but has not looked at student programming artifacts, such as projects and code submissions to understand how these errors occur and which are most common. To address this, we qualitatively coded over 2,500 cells of code from 19 final team projects (63 students) in an upper-division machine learning course. By isolating and codifying common errors and misconceptions across projects, we can identify what ML errors students struggle with. In our results, we found that library usage, hyperparameter tuning, and misusing test data were among the most common errors, and we give examples of how and when they occur. We then provide suggestions on why these misconceptions may occur, and how instructors and software designers can possibly mitigate these errors."
  },
  {
    "title": "Disequilibration for teaching the scientific method in computer science",
    "abstract": "We present several introductory computer science laboratory assignments designed to reinforce the use of the scientific method. These assignments require students to make predictions, write simulations, perform experiments, collect data and analyze the results. The assignments are specifically designed to place student predictions in conflict with the observed results, thus producing a disequilibration. As a result, students are motivated to critically examine their simulations, consider their assumptions, and repeat their experiments. These potential benefits of disequilibration are discussed and additional ways to apply disequilibration in computer science education are suggested."
  },
  {
    "title": "Co-Designing Learning Experiences to Support the Development of Culturally Relevant CS Lessons in Elementary Classrooms",
    "abstract": "This poster reports on a workshop to help elementary school teachers integrate culturally relevant computer science (CS) learning opportunities into their classrooms. Findings highlight the importance of facilitators to help teachers discuss cultural competence and the value of co-developed rubrics to evaluate lessons. The presentation will discuss results and share artifacts from the workshop."
  }
]